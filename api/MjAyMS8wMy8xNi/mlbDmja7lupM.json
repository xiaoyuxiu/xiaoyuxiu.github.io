{"title":"数据库","date":"2021-03-16T13:11:36.800Z","date_formatted":{"ll":"2021年3月16日","L":"2021/03/16","MM-DD":"03-16"},"link":"2021/03/16/数据库","updated":"2021-03-15T12:29:20.497Z","content":"<h1 id=\"一、什么是sql？\">一、什么是SQL？<a title=\"#一、什么是sql？\" href=\"#一、什么是sql？\"></a></h1>\n<p>SQL 是结构化查询语言 Structured Query Language 的缩写，用来访问和操作数据库系统。SQL 语句既可以查询数据库中的数据，也可以添加、更新和删除数据库中的数据，还可以对数据库进行管理和维护操作。不同的数据库，都支持 SQL，这样，我们通过学习 SQL 这一种语言，就可以操作各种不同的数据库。</p>\n<p>SQL定义了这么几种操作数据库的能力：</p>\n<p>DDL：Data Definition Language</p>\n<p>允许用户定义数据，也就是创建表、删除表、修改表结构这操作。通常，DDL由数据库管理员执行。</p>\n<p>DML：Data Manipulation Language</p>\n<p>为用户提供添加、删除、更新数据的能力，这些是应用程序对数据库的日常操作。</p>\n<p>DQL：Data Query Language</p>\n<p>允许用户查询数据，这也是通常最频繁的数据库日常操作。</p>\n<p>即：</p>\n<h2 id=\"ddl-定义数据（增删表，修改表结构）\">DDL-定义数据（增删表，修改表结构）<a title=\"#ddl-定义数据（增删表，修改表结构）\" href=\"#ddl-定义数据（增删表，修改表结构）\"></a></h2>\n<h2 id=\"dml-管理数据（增删改数据）\">DML-管理数据（增删改数据）<a title=\"#dml-管理数据（增删改数据）\" href=\"#dml-管理数据（增删改数据）\"></a></h2>\n<h2 id=\"dql-查询数据\">DQL-查询数据<a title=\"#dql-查询数据\" href=\"#dql-查询数据\"></a></h2>\n<h1 id=\"二、mysql\">二、MySQL<a title=\"#二、mysql\" href=\"#二、mysql\"></a></h1>\n<p>MySQL是目前应用最广泛的开源关系数据库，所使用的 SQL 语言是用于访问数据库的最常用的标准化语言，其特点为体积小、速度快、总体拥有成本低，尤其是开放源码这一特点。</p>\n<h2 id=\"==mysql的端口号一定为3306==\">==mysql的端口号一定为3306==<a title=\"#==mysql的端口号一定为3306==\" href=\"#==mysql的端口号一定为3306==\"></a></h2>\n<h2 id=\"==comment==\">==comment==<a title=\"#==comment==\" href=\"#==comment==\"></a></h2>\n<p>1、是备注、注释的意思</p>\n<p>2、COMMENT 'id’删除不会影响数据操作，只是没有字段注释说明，通常字段或列名都需要加注释，以方便自己和其他同事阅读数据库表字段信息。</p>\n<p>3、在MySQL数据库中，字段或列的注释是用属性comment来添加。</p>\n<p>创建新表添时，填加comment注释的示例代码如下：</p>\n<p>create table test(id int not null default 0 comment ‘用户id’);</p>\n<h1 id=\"三、关系数据库管理系统(relational-database-management-system)的特点：\">三、关系数据库管理系统(Relational Database Management System)的特点：<a title=\"#三、关系数据库管理系统(relational-database-management-system)的特点：\" href=\"#三、关系数据库管理系统(relational-database-management-system)的特点：\"></a></h1>\n<p>1.数据以表格的形式出现</p>\n<p>2.每行为各种记录名称</p>\n<p>3.每列为记录名称所对应的数据域</p>\n<p>4.许多的行和列组成一张表单</p>\n<p>5.若干的表单组成database（数据库）</p>\n<h2 id=\"基本概念\"><strong>基本概念</strong><a title=\"#基本概念\" href=\"#基本概念\"></a></h2>\n<p><em><strong>*数据库:*</strong></em> 数据库是一些关联表的集合。</p>\n<p><em><strong>*数据表:*</strong></em> 表是数据的矩阵。在一个数据库中的表看起来像一个简单的电子表格。</p>\n<p><em><strong>*列:*</strong></em> 一列(数据元素) 包含了相同类型的数据, 例如邮政编码的数据。</p>\n<p>****行：****一行（=元组，或记录）是一组相关的数据，例如一条用户订阅的数据。</p>\n<p><em><strong>*冗余*</strong></em>：存储两倍数据，冗余降低了性能，但提高了数据的安全性。</p>\n<p><em><strong>*主键*</strong></em>：主键是唯一的。一个数据表中只能包含一个主键。你可以使用主键来查询数据。</p>\n<p>****外键：****外键用于关联两个表。</p>\n<p><em><strong>*复合键*</strong></em>：复合键（组合键）将多个列作为一个索引键，一般用于复合索引。</p>\n<p>****索引：****使用索引可快速访问数据库表中的特定信息。索引是对数据库表中一列或多列的值进行排序的一种结构。类似于书籍的目录。</p>\n<p><em><strong>*参照完整性:*</strong></em> 参照的完整性要求关系中不允许引用不存在的实体。与实体完整性是关系模型必须满足的完整性约束条件，目的是保证数据的一致性。</p>\n<p>![img](file:///C:\\Users\\Administrator\\AppData\\Local\\Temp\\ksohtml13072\\wps1.jpg)</p>\n<p><em><strong>*表头(header)*</strong></em>: 每一列的名称;</p>\n<p><em><strong>*列(col):*</strong></em> 具有相同数据类型的数据的集合;</p>\n<p><em><strong>*行(row)*</strong></em>: 每一行用来描述某条记录的具体信息;</p>\n<p><em><strong>*值(value)*</strong></em>: 行的具体信息, 每个值必须与该列的数据类型相同;</p>\n<p><em><strong>*键(key)*</strong></em>: 键的值在当前列中具有唯一性。</p>\n<h1 id=\"四、使用终端操作数据库-（命令后加；）\">四、使用终端操作数据库 （命令后加；）<a title=\"#四、使用终端操作数据库-（命令后加；）\" href=\"#四、使用终端操作数据库-（命令后加；）\"></a></h1>\n<p>1、如何登录数据库服务器</p>\n<p>mysql  -uroot  -p登陆密码（登陆本机）</p>\n<p>Mysql  -h主机名 -p端口名  -u用户名  -p登陆密码</p>\n<p>2、退出</p>\n<p>exit 或ctrl+c</p>\n<p>3、如何查询数据库服务器中的数据库</p>\n<p>show database；</p>\n<p>![img](file:///C:\\Users\\Administrator\\AppData\\Local\\Temp\\ksohtml13072\\wps2.jpg)</p>\n<p>4、如何选中一个数据库进行操作</p>\n<p>use 数据库</p>\n<p>Show tables 从当前数据库查看信息</p>\n<p>![img](file:///C:\\Users\\Administrator\\AppData\\Local\\Temp\\ksohtml13072\\wps3.jpg)</p>\n<p>show tables from 数据库名 可从别的数据库查看别的数据库信息</p>\n<p>select database(); 查看当前所在数据库</p>\n<p>![img](file:///C:\\Users\\Administrator\\AppData\\Local\\Temp\\ksohtml13072\\wps4.jpg)</p>\n<p>5、创建表和列</p>\n<p>create table + 表名（</p>\n<p>再是列的种类</p>\n<p>若是结束了也用）；结尾</p>\n<p>6、查看表的内容</p>\n<p>desc +表名</p>\n<p>![img](file:///C:\\Users\\Administrator\\AppData\\Local\\Temp\\ksohtml13072\\wps5.jpg)</p>\n<p>7、查看表的数据</p>\n<p>select * from +表名</p>\n<p>![img](file:///C:\\Users\\Administrator\\AppData\\Local\\Temp\\ksohtml13072\\wps6.jpg)</p>\n<p>8、表中插入数据</p>\n<p>Insert into +表名（数据类型）value+（内容）</p>\n<p>![img](file:///C:\\Users\\Administrator\\AppData\\Local\\Temp\\ksohtml13072\\wps7.jpg)</p>\n<p>9、修改数据</p>\n<p>update 表名 set 数据类型 = ’修改内容‘ where 数据类型 = 内容</p>\n<p>![img](file:///C:\\Users\\Administrator\\AppData\\Local\\Temp\\ksohtml13072\\wps8.jpg)</p>\n<p>10、删除数据</p>\n<p>delete from stuinfo where内容；</p>\n<p>![img](file:///C:\\Users\\Administrator\\AppData\\Local\\Temp\\ksohtml13072\\wps9.jpg)</p>\n<p>11、查看数据库版本</p>\n<p>登录到mysql服务器：select version();</p>\n<p>没有登陆：mysql --version/mysql --V</p>\n<p>![img](file:///C:\\Users\\Administrator\\AppData\\Local\\Temp\\ksohtml13072\\wps10.jpg)</p>\n<p>12、mysql语法规范</p>\n<p>不区分大小写，但建议==关键字大小，表名列名小写,每条命令分号结尾，根据需要可以进行缩进，换行==</p>\n<p>![img](file:///C:\\Users\\Administrator\\AppData\\Local\\Temp\\ksohtml13072\\wps11.jpg)</p>\n<p>注释 单行：#注释文字  - - 注释文字</p>\n<p>​        多行：/<em>注释文字</em>/</p>\n<h1 id=\"五、sql语言\">五、sql语言<a title=\"#五、sql语言\" href=\"#五、sql语言\"></a></h1>\n<p>分为DQL语言、DML语言、DDL语言、TCL语言</p>\n<h1 id=\"dql语言\">DQL语言<a title=\"#dql语言\" href=\"#dql语言\"></a></h1>\n<h2 id=\"1、基础查询\">1、基础查询<a title=\"#1、基础查询\" href=\"#1、基础查询\"></a></h2>\n<p>==select+查询列表 from+表名；显示什么==</p>\n<p>类似于system.out.print()打印什么</p>\n<p>特点：1、查询列表可以是：表中的字段、常量值、表达式、函数</p>\n<p>​           2、查询的结果是一个虚拟的表格</p>\n<p>use 启动的数据库名；</p>\n<p>#查询单个字段 select <code>字段名</code> from 对应的表名；</p>\n<p>#查询表中的多个字段 select <code>字段名</code>，<code>字段名</code>… from 对应的表名；</p>\n<p>#查询表中的所有字段</p>\n<p>select <code>字段名</code>，<code>字段名</code>… （可直接双击左边数据库的字段名，会按选择顺序显示）from 对应的表名；</p>\n<p><strong>select * from 对应的表名；</strong></p>\n<p><strong>查询表中的常量值，只要是字符用双引号 select 100；</strong></p>\n<p><strong>查询表中的表达式 select 100%98；</strong></p>\n<p><strong>查询表中的函数（方法） select version();</strong></p>\n<h3 id=\"起别名（方便理解）\">起别名（方便理解）<a title=\"#起别名（方便理解）\" href=\"#起别名（方便理解）\"></a></h3>\n<p>方式一，用as</p>\n<p>select 100&amp;98 As 别名；</p>\n<p>方式二，用空格</p>\n<p>select 100&amp;98 别名，first 别名 from 对应的表名；</p>\n<h3 id=\"去重distinct\">去重distinct<a title=\"#去重distinct\" href=\"#去重distinct\"></a></h3>\n<p>案例：查询员工表中涉及的所有部门编号</p>\n<p>​\tselect distinct department from 对应的表名；</p>\n<h3 id=\"+号的作用--运算符，两个操作数都是数值型\">+号的作用  运算符，两个操作数都是数值型<a title=\"#+号的作用--运算符，两个操作数都是数值型\" href=\"#+号的作用--运算符，两个操作数都是数值型\"></a></h3>\n<p>select 100+90 190</p>\n<p>select ‘123’+90  213  ==其中一方为字符串，试图将字符型数值转换成数值型，如果转换成功，则继续做加法运算==</p>\n<p>select ‘join’+90  90 如果转换失败，则返回原始数据</p>\n<p>select null+90 90 只要其中一方为null ，则结果显示为null</p>\n<p>案例：查询员工名和姓连接成一个字段，并显示为姓名</p>\n<p>select concat(‘a’,‘b’,‘c’) As 别名from 对应的表名</p>\n<p>==查询数据库，如果字段名为空，返回0==</p>\n<p>==select ifnull(‘字段名’，0)  As 别名 from 对应的表名==</p>\n<h2 id=\"条件查询\">条件查询<a title=\"#条件查询\" href=\"#条件查询\"></a></h2>\n<p>语法：==select 查询列表 from 表名 where 筛选条件；（条件成立即可过滤出来）==</p>\n<p>分类：按条件运算符 &lt;  &gt;  =  !=  &lt;&gt;也为不等 &gt;=  &lt;=</p>\n<p>​            按逻辑运算符 &amp;&amp;  ||  ！用于链接条件表达式</p>\n<p>​            模糊查询  like  特点：和通配符搭配 ，</p>\n<p>==%任意多个字符，包含0个字符==</p>\n<p>==_任意单个字符==</p>\n<p><strong>between and 特点：提高简洁读 包含临界值  要从小到大排序</strong></p>\n<p><strong>in 特点：用于去判断某字段的值是不是in列表里的值</strong></p>\n<p>​                <strong>字段的值要同种类型</strong></p>\n<p><strong>is null特点：=或&lt;&gt;（不等于）不能用于判断null值</strong></p>\n<h3 id=\"查询工资高于12000的员工：\">查询工资高于12000的员工：<a title=\"#查询工资高于12000的员工：\" href=\"#查询工资高于12000的员工：\"></a></h3>\n<p>select * from  employee  where salary&gt;12000</p>\n<p>逻辑运算符</p>\n<h3 id=\"查询工资在12000到15000的员工：\">查询工资在12000到15000的员工：<a title=\"#查询工资在12000到15000的员工：\" href=\"#查询工资在12000到15000的员工：\"></a></h3>\n<p>select * from  employee  where salary&gt;12000 &amp;&amp;salary &lt;15000</p>\n<p>==模糊查询 like 像==</p>\n<p>（条件不是特别具体）</p>\n<p>select * from  employee  where  name like ‘%a%’（%代表通配符）</p>\n<h3 id=\"查询员工名包含第三个字符e，第五个字符为a的员工（条件不是特别具体）\">查询员工名包含第三个字符e，第五个字符为a的员工（条件不是特别具体）<a title=\"#查询员工名包含第三个字符e，第五个字符为a的员工（条件不是特别具体）\" href=\"#查询员工名包含第三个字符e，第五个字符为a的员工（条件不是特别具体）\"></a></h3>\n<p>select * from  employee where  name like‘__e_a%’（_代表字符个数）</p>\n<h3 id=\"查询员工名包含第二个字符_的员工（条件不是特别具体）\">查询员工名包含第二个字符_的员工（条件不是特别具体）<a title=\"#查询员工名包含第二个字符_的员工（条件不是特别具体）\" href=\"#查询员工名包含第二个字符_的员工（条件不是特别具体）\"></a></h3>\n<p>select * from  employee where  name like‘__%’ escape  ‘\\’（任意符号都可代表转义，用escape）</p>\n<p>==between and 在…之间==</p>\n<h3 id=\"查询员工编号在100到200之间\">查询员工编号在100到200之间<a title=\"#查询员工编号在100到200之间\" href=\"#查询员工编号在100到200之间\"></a></h3>\n<p>select * from  employee  where  id&gt;100 &amp;&amp; id &lt;200  ==</p>\n<p>select * from  employee id  where  id  between  100  and  200</p>\n<p>==In 用于去判断某字段的值是不是in列表里的值==</p>\n<h3 id=\"查询员工工种编号是it-、ad中的一个员工编号\">查询员工工种编号是IT 、AD中的一个员工编号<a title=\"#查询员工工种编号是it-、ad中的一个员工编号\" href=\"#查询员工工种编号是it-、ad中的一个员工编号\"></a></h3>\n<p>select * from  employee id  where  job id = ‘IT’|| job id = ‘AT’</p>\n<p>== select * from  employee  id  where  job id in（‘IT’‘AT’）</p>\n<p>==is null 只可以判断null值==</p>\n<h3 id=\"查询没有（有）奖金的员工名和奖金率\">查询没有（有）奖金的员工名和奖金率<a title=\"#查询没有（有）奖金的员工名和奖金率\" href=\"#查询没有（有）奖金的员工名和奖金率\"></a></h3>\n<p>select * from  employee id  where  comsionn  is  (not )null</p>\n<p>==安全等于 &lt;=&gt; 判断普通类型的值，判断是否等于，等于返回==</p>\n<h3 id=\"查询没有（有）奖金\">查询没有（有）奖金<a title=\"#查询没有（有）奖金\" href=\"#查询没有（有）奖金\"></a></h3>\n<h1 id=\"排序查询\">排序查询<a title=\"#排序查询\" href=\"#排序查询\"></a></h1>\n<p>==引入：select * from  employee id  显示原始的数据====</p>\n<p>当我们要按工资的高低先后显示出来</p>\n<p>可直接在图形化界面直接点那个表头就可以排序</p>\n<p><strong>用sql语句：select  查询列表 from 表 【where筛选条件】====order</strong></p>\n<p>​                        ** by****支**  <strong>持 别名）排序列表【ascldesc】</strong>====</p>\n<p><strong>特点: 高到低：desc   低到高：asc  不写默认是低到高</strong></p>\n<p><strong>order by 可以支持多个字段、单个字段、表达式、函数、别名</strong></p>\n<p><strong>order by 一般放在查询语句最后面，limit的子句除外</strong></p>\n<h2 id=\"查询员工工资从高到低：\">查询员工工资从高到低：<a title=\"#查询员工工资从高到低：\" href=\"#查询员工工资从高到低：\"></a></h2>\n<p>select * from  employee  order by  salary desc；</p>\n<h2 id=\"查询部门编号大于等于90的员工信息，按入职时间先后进行排序\">查询部门编号大于等于90的员工信息，按入职时间先后进行排序<a title=\"#查询部门编号大于等于90的员工信息，按入职时间先后进行排序\" href=\"#查询部门编号大于等于90的员工信息，按入职时间先后进行排序\"></a></h2>\n<p>select * from employee where department_id&gt;=90 order by hirdate asc;</p>\n<h2 id=\"按年薪高低显示员工年薪和信息（表达式）\">按年薪高低显示员工年薪和信息（表达式）<a title=\"#按年薪高低显示员工年薪和信息（表达式）\" href=\"#按年薪高低显示员工年薪和信息（表达式）\"></a></h2>\n<p>select <em>，salary</em>12*(1+ifnull(commission_pat,0) 年薪 from employee order by salary<em>12</em>(1+ifnull(commission_pat,0)/年薪 asc;</p>\n<h2 id=\"按姓名长度显示员工姓名和工资（函数）\">按姓名长度显示员工姓名和工资（函数）<a title=\"#按姓名长度显示员工姓名和工资（函数）\" href=\"#按姓名长度显示员工姓名和工资（函数）\"></a></h2>\n<p>select  length（last_name),last_name,salsry from employee order by length（last_name)  asc;</p>\n<h2 id=\"查询员工信息，先按工资排序，再按员工编号排序（多个字段）：\">查询员工信息，先按工资排序，再按员工编号排序（多个字段）：<a title=\"#查询员工信息，先按工资排序，再按员工编号排序（多个字段）：\" href=\"#查询员工信息，先按工资排序，再按员工编号排序（多个字段）：\"></a></h2>\n<p>select * from  employee  order by  salary  asc，employee_id desc；</p>\n<h1 id=\"常见函数\">常见函数<a title=\"#常见函数\" href=\"#常见函数\"></a></h1>\n<p>功能:类似于java中的方法，具备的含义将实现某个功能的逻辑语句封装到一个方法中，对外暴露方法名</p>\n<p>好处：隐藏功能的实现细节，提高代码的重用性</p>\n<p>==调用：select 函数名（实参列表）  【from  表】==</p>\n<p>特点：该方法叫什么（函数名）  干什么（函数功能）</p>\n<p>分类：单行函数： 做处理  一个返一个</p>\n<p>分组函数： 做统计使用，又为统计函数、聚合函数、组函数  多个返一个</p>\n<p>==单行函数：字符、数学、日期、其他函数、流程控制函数==</p>\n<h2 id=\"1、字节函数：\">1、字节函数：<a title=\"#1、字节函数：\" href=\"#1、字节函数：\"></a></h2>\n<h3 id=\"length获取参数的字节个数\">Length获取参数的字节个数<a title=\"#length获取参数的字节个数\" href=\"#length获取参数的字节个数\"></a></h3>\n<p>select  length（‘join’)  返回4</p>\n<p>select  length（‘张三丰hahaha’)  返回15 一个汉字占3个字节</p>\n<h3 id=\"concat拼接字符串\">Concat拼接字符串<a title=\"#concat拼接字符串\" href=\"#concat拼接字符串\"></a></h3>\n<p>select  concat（last_name,_,first_name) 姓名from  employee</p>\n<h3 id=\"uper、lower大写小写\">Uper、lower大写小写<a title=\"#uper、lower大写小写\" href=\"#uper、lower大写小写\"></a></h3>\n<p>select  Uper（‘join’） 返回JOIN</p>\n<p>select  lower（‘JOIN’） 返回join</p>\n<h3 id=\"将姓大写，名小写，拼接\">将姓大写，名小写，拼接<a title=\"#将姓大写，名小写，拼接\" href=\"#将姓大写，名小写，拼接\"></a></h3>\n<p>select  concat （uper（last_name),lower（first_name）)from。。。。</p>\n<h3 id=\"substr、substring-截取字符串，索引从1开始\">Substr、substring 截取字符串，索引从1开始<a title=\"#substr、substring-截取字符串，索引从1开始\" href=\"#substr、substring-截取字符串，索引从1开始\"></a></h3>\n<p>Select  substr（‘李莫愁爱上了陆展源’，6）out_put; 返回了陆展源</p>\n<p>Select  substr（‘李莫愁爱上了陆展源’，1，3）out_put; 返回李莫愁</p>\n<h3 id=\"instr返回第一次出现的起始索引\">Instr返回第一次出现的起始索引<a title=\"#instr返回第一次出现的起始索引\" href=\"#instr返回第一次出现的起始索引\"></a></h3>\n<p>Select  Instr（‘李莫愁爱上了陆展源’，’陆展源‘）as out_put</p>\n<p>from  employee； 返回7，找不到返回0</p>\n<h3 id=\"trim-去前后\">trim 去前后<a title=\"#trim-去前后\" href=\"#trim-去前后\"></a></h3>\n<p>Select trim（‘a’ from ‘aaaaaa张aaaaaaa翠山aaaaaaaaaaaaaaaaa  ’）as out_put  返回张aaaaaaa翠山</p>\n<h3 id=\"lpad-用指定字符左填充\">Lpad 用指定字符左填充<a title=\"#lpad-用指定字符左填充\" href=\"#lpad-用指定字符左填充\"></a></h3>\n<p>Select  lpad（‘殷素素’ ，5，‘*’）as out_put  返回**殷素素</p>\n<h3 id=\"rpad-用指定字符右填充\">rpad 用指定字符右填充<a title=\"#rpad-用指定字符右填充\" href=\"#rpad-用指定字符右填充\"></a></h3>\n<p>Select  rpad（‘殷素素’ ，5，‘*’）as out_put  返回殷素素**</p>\n<h3 id=\"replace-替换\">replace 替换<a title=\"#replace-替换\" href=\"#replace-替换\"></a></h3>\n<p>Select  rpad（‘殷素素’ ，‘殷’，‘赵’）as out_put 返回赵素素</p>\n<h3 id=\"1、数学函数：\">1、数学函数：<a title=\"#1、数学函数：\" href=\"#1、数学函数：\"></a></h3>\n<h4 id=\"round-四舍五入\">Round 四舍五入<a title=\"#round-四舍五入\" href=\"#round-四舍五入\"></a></h4>\n<p>Select  round（1.45）；先弄绝对值 再加正负号</p>\n<p>Select  round（1.457，2）；小数点保留两位，返回1.46</p>\n<h4 id=\"ceil-向上取整，返回大于等于参数的最小整数\">ceil 向上取整，返回大于等于参数的最小整数<a title=\"#ceil-向上取整，返回大于等于参数的最小整数\" href=\"#ceil-向上取整，返回大于等于参数的最小整数\"></a></h4>\n<p>Select  ceil（1.45）； 返回2</p>\n<p>Select  ceil（1.00）； 返回1</p>\n<h4 id=\"floor-向下取整，返回小于等于参数的最大整数\">Floor 向下取整，返回小于等于参数的最大整数<a title=\"#floor-向下取整，返回小于等于参数的最大整数\" href=\"#floor-向下取整，返回小于等于参数的最大整数\"></a></h4>\n<p>Select  floor（-9.99）； 返回-10</p>\n<h4 id=\"truncate截断，保留小数后几位\">truncate截断，保留小数后几位<a title=\"#truncate截断，保留小数后几位\" href=\"#truncate截断，保留小数后几位\"></a></h4>\n<p>Select  truncate（1.65，1）； 返回1.6</p>\n<h4 id=\"mod-取余，==被除数负数取余为负数，被除数正数取余为正数==\">Mod 取余，==被除数负数取余为负数，被除数正数取余为正数==<a title=\"#mod-取余，==被除数负数取余为负数，被除数正数取余为正数==\" href=\"#mod-取余，==被除数负数取余为负数，被除数正数取余为正数==\"></a></h4>\n<p>Mod（a，b）  语法：a- （a/b）*b</p>\n<p>Select  mod（10，3）  10%3 返回1</p>\n<h3 id=\"2、日期函数：\">2、日期函数：<a title=\"#2、日期函数：\" href=\"#2、日期函数：\"></a></h3>\n<h4 id=\"now-返回当前系统日期+时间\">Now 返回当前系统日期+时间<a title=\"#now-返回当前系统日期+时间\" href=\"#now-返回当前系统日期+时间\"></a></h4>\n<p>Select  now（）</p>\n<h4 id=\"curdate返回当前系统日期\">curdate返回当前系统日期<a title=\"#curdate返回当前系统日期\" href=\"#curdate返回当前系统日期\"></a></h4>\n<p>Select  curdate（）</p>\n<h4 id=\"curtime返回当前系统时间\">Curtime返回当前系统时间<a title=\"#curtime返回当前系统时间\" href=\"#curtime返回当前系统时间\"></a></h4>\n<p>Select  curtime（）</p>\n<h4 id=\"获取指定的年月日小时分钟秒\">获取指定的年月日小时分钟秒<a title=\"#获取指定的年月日小时分钟秒\" href=\"#获取指定的年月日小时分钟秒\"></a></h4>\n<p>Select  year（now（））年；</p>\n<p>Select  year（1999）年；</p>\n<p>Select  month（now（））月</p>\n<p>Select  month_name（now（））月</p>\n<h4 id=\"str_to_date将日期格式的字符转换成指定格式的日期\">Str_to_date将日期格式的字符转换成指定格式的日期<a title=\"#str_to_date将日期格式的字符转换成指定格式的日期\" href=\"#str_to_date将日期格式的字符转换成指定格式的日期\"></a></h4>\n<p>Str_to_date（‘9-13-1999’，‘%m-%d-%Y）   1999-09-13</p>\n<h4 id=\"date_format:将日期转换成字符\">Date_format:将日期转换成字符<a title=\"#date_format:将日期转换成字符\" href=\"#date_format:将日期转换成字符\"></a></h4>\n<p>Date_format（‘2018/6/6’，‘%Y年%m月%d日） 2018年6月6日</p>\n<h3 id=\"3、其他函数\">3、其他函数<a title=\"#3、其他函数\" href=\"#3、其他函数\"></a></h3>\n<p>select vesion（）查看当前数据库版本</p>\n<p>select database（）查看数据库</p>\n<p>select user（）查看用户</p>\n<h3 id=\"4、流程控制函数\">4、流程控制函数<a title=\"#4、流程控制函数\" href=\"#4、流程控制函数\"></a></h3>\n<p>Select if（条件，ture表达式值，flse表达式值）</p>\n<p>案例：Select if（10&gt;5，大，小）</p>\n<h4 id=\"case函数：\">case函数：<a title=\"#case函数：\" href=\"#case函数：\"></a></h4>\n<p><strong>==使用一：类似于java的switch case的效果==</strong></p>\n<p>Mysql：</p>\n<p>Case（要判断的字段表达式）</p>\n<p>When常量值1 then 要显示的语句1；</p>\n<p>When常量值2 then 要显示的语句2；</p>\n<p>…</p>\n<p>Else 要显示的语句；</p>\n<p>End</p>\n<p>【可单独使用，也可搭配select】</p>\n<h4 id=\"案例查询员工工资--部门号为30-显示的工资为原工资的1.1倍\">案例查询员工工资  部门号为30 显示的工资为原工资的1.1倍<a title=\"#案例查询员工工资--部门号为30-显示的工资为原工资的1.1倍\" href=\"#案例查询员工工资--部门号为30-显示的工资为原工资的1.1倍\"></a></h4>\n<h4 id=\"部门号为40-显示的工资为原工资的1.2倍\">部门号为40 显示的工资为原工资的1.2倍<a title=\"#部门号为40-显示的工资为原工资的1.2倍\" href=\"#部门号为40-显示的工资为原工资的1.2倍\"></a></h4>\n<h4 id=\"其他员工资\">其他员工资<a title=\"#其他员工资\" href=\"#其他员工资\"></a></h4>\n<p>select salary原始工资，department_id，</p>\n<p>case  department_id</p>\n<p>When 30 then salary*1.1  （不是语句不放分号）</p>\n<p>When 40 then salary*1.2</p>\n<p>Else salary</p>\n<p>End as 新工资</p>\n<p>From employee</p>\n<p>==使用二：类似于java多重if==</p>\n<p>If（条件1）{</p>\n<p>语句1；</p>\n<p>}else if（条件2）{</p>\n<p>语句2；</p>\n<p>}else {</p>\n<p>语句n；</p>\n<p>}</p>\n<p>Mysql：</p>\n<p>Case</p>\n<p>When 条件1 then 值1或语句1；（是true）</p>\n<p>When 条件2 then 值2或语句2；（是true）</p>\n<p>​        …</p>\n<p>Else 要显示的值或语句</p>\n<p>End</p>\n<h4 id=\"查询员工新工资\">查询员工新工资<a title=\"#查询员工新工资\" href=\"#查询员工新工资\"></a></h4>\n<h4 id=\"如果工资&gt;20000，显示a级别\">如果工资&gt;20000，显示A级别<a title=\"#如果工资&gt;20000，显示a级别\" href=\"#如果工资&gt;20000，显示a级别\"></a></h4>\n<h4 id=\"如果工资&gt;15000，显示b级别\">如果工资&gt;15000，显示B级别<a title=\"#如果工资&gt;15000，显示b级别\" href=\"#如果工资&gt;15000，显示b级别\"></a></h4>\n<h4 id=\"如果工资&gt;10000，显示c级别\">如果工资&gt;10000，显示C级别<a title=\"#如果工资&gt;10000，显示c级别\" href=\"#如果工资&gt;10000，显示c级别\"></a></h4>\n<h4 id=\"否则，显示d\">否则，显示D<a title=\"#否则，显示d\" href=\"#否则，显示d\"></a></h4>\n<p>select salary原始工资，department_id，</p>\n<p>Case</p>\n<p>When  salary &gt;20000  then‘A’ （不是语句不放分号）</p>\n<p>When  salary &gt;15000  then ‘B’</p>\n<p>When  salary &gt;10000  then ‘C’</p>\n<p>Else ‘D’</p>\n<p>End as 新工资</p>\n<p>From employee</p>\n<h3 id=\"分组函数\">分组函数<a title=\"#分组函数\" href=\"#分组函数\"></a></h3>\n<p>==特点：1、sum、avg一般用于处理数值型==</p>\n<p>​            ==2、max、min、count、用于处理任何类型==</p>\n<p>​            ==3、分组函数都null没有参与运算==</p>\n<p>​           ==4、可以和distinct搭配，去重==</p>\n<p>​           ==5、和分组函数一同查询的字段有限制，要求是ground by的字段==</p>\n<p>​     select avg（salary）只有一个，employee_id很多 from employee</p>\n<h4 id=\"1、sum求和\">1、Sum求和<a title=\"#1、sum求和\" href=\"#1、sum求和\"></a></h4>\n<p>简单的使用  select sun（salary）from employee</p>\n<h4 id=\"2、avg平均值\">2、Avg平均值<a title=\"#2、avg平均值\" href=\"#2、avg平均值\"></a></h4>\n<p>简单的使用  select avg（salary）from employee</p>\n<h4 id=\"3、max最大值--可支持字符、日期\">3、Max最大值  可支持字符、日期<a title=\"#3、max最大值--可支持字符、日期\" href=\"#3、max最大值--可支持字符、日期\"></a></h4>\n<p>简单的使用  select max（salary）from employee</p>\n<h4 id=\"4、min最小值--可支持字符、日期\">4、Min最小值  可支持字符、日期<a title=\"#4、min最小值--可支持字符、日期\" href=\"#4、min最小值--可支持字符、日期\"></a></h4>\n<p>简单的使用  select min（salary）from employee</p>\n<h4 id=\"5、count计算个数\">5、Count计算个数<a title=\"#5、count计算个数\" href=\"#5、count计算个数\"></a></h4>\n<p>select count（*/常量值/阿拉伯数字）from employee  统计行数</p>\n<p>效率——mysiam 存储引擎下，count（*）效率最高</p>\n<p>默认的引擎innoob，count（*）和count（1）效率差不都，但比count（字段）快</p>\n<p>==所以一般使用 count（*）统计行数==</p>\n<p>简单的使用  select count（salary）from employee</p>\n<p>结合：select sun（salary）， avg（salary），max（salary），</p>\n<p>​           min（salary），count（salary）from employee</p>\n<p>​          select sun（salary）， round(avg（salary），2)  max（salary），</p>\n<p>​           min（salary），count（salary）from employee</p>\n<p>==相差天数：datediff（晚，早）==</p>\n<p>引入：查询每个部门的平均工资</p>\n<h5 id=\"==语法:-group-by字句语法==\">==语法: group by字句语法==<a title=\"#==语法:-group-by字句语法==\" href=\"#==语法:-group-by字句语法==\"></a></h5>\n<p>==Select 分组函数，列（要求出现在group by的后面）from 表==</p>\n<p>==where 筛选条件】group by 分组的列表【order by子句】==</p>\n<p>==注意：查询列表比较特殊，要求是分组函数和group by后出现的字段==</p>\n<p>（1）Group by语法可以根据给定数据列的每个成员对查询结果进行分组，这里的分组就是将一个**“数据集合”划分成若干个“小块”，然后对这些“小块”进行数据处理。最终得到按一个分组汇总的结果表。**</p>\n<p>（2）SELECT子句后面的字段一般是聚合函数或者是Group by 后面的。</p>\n<p>（3）Group by 一般和sum、max、avg等聚合函数一起使用。</p>\n<p><img src=\"https://img-blog.csdn.net/20171215151327126?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvb21lbG9uMQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" class=\"φcx\"></p>\n<p><img src=\"https://img-blog.csdn.net/20171215151409523?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvb21lbG9uMQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" class=\"φcx\"></p>\n<h5 id=\"特点：\">特点：<a title=\"#特点：\" href=\"#特点：\"></a></h5>\n<p>1、条件分为两类，数据源不一样</p>\n<p>分组前筛选（原始表，库里面真实存在的）group by字句where</p>\n<p>分组后筛选（分组后的结果集）  group by字句后 having</p>\n<p>分组函数做条件是放在having子句中</p>\n<p>能用分组前筛选的，优先考虑使用分组前筛选</p>\n<p>2、group by字句支持的单个字段分组（多个字段之间用逗号</p>\n<p>​    隔开没有顺序要求），支持表达式和函数，用的比较少</p>\n<p>3、也可以添加排序（排序放在整个分组）</p>\n<h5 id=\"每个工种的最高工资\">每个工种的最高工资<a title=\"#每个工种的最高工资\" href=\"#每个工种的最高工资\"></a></h5>\n<p>select max（salary），job_id from employees group by job_id</p>\n<h5 id=\"每个位置的部门个数\">每个位置的部门个数<a title=\"#每个位置的部门个数\" href=\"#每个位置的部门个数\"></a></h5>\n<p>select count（*），location_id from department group by location_id</p>\n<h5 id=\"查询邮箱中包含a字符的，每个部门的平均工资\">查询邮箱中包含a字符的，每个部门的平均工资<a title=\"#查询邮箱中包含a字符的，每个部门的平均工资\" href=\"#查询邮箱中包含a字符的，每个部门的平均工资\"></a></h5>\n<p>select  avg（salary），department_id from employee where emails like</p>\n<p>‘%a%’ group  by  department_id</p>\n<h5 id=\"查询有奖金的每个领导手下员工最高工资\">查询有奖金的每个领导手下员工最高工资<a title=\"#查询有奖金的每个领导手下员工最高工资\" href=\"#查询有奖金的每个领导手下员工最高工资\"></a></h5>\n<p>select  max（salary），manager_id from employee where commission_pct  is  not null  group  by  manager_id</p>\n<h5 id=\"查询哪个部门的员工个数大于2--分组后的筛选having\">查询哪个部门的员工个数大于2  分组后的筛选having<a title=\"#查询哪个部门的员工个数大于2--分组后的筛选having\" href=\"#查询哪个部门的员工个数大于2--分组后的筛选having\"></a></h5>\n<p>#查询每个部门的员工个数</p>\n<p>select count（*），department_id from employee group by departmentr_id</p>\n<p>#根据上述结果进行筛选，查询哪个部门的员工个数大于2</p>\n<p>select count（<em>），department_id from employee group by departmentr_id having count（</em>）&gt;2</p>\n<h5 id=\"查询每个工种有奖金的员工的最高工资大于12000的工种编号和最高工资\">查询每个工种有奖金的员工的最高工资大于12000的工种编号和最高工资<a title=\"#查询每个工种有奖金的员工的最高工资大于12000的工种编号和最高工资\" href=\"#查询每个工种有奖金的员工的最高工资大于12000的工种编号和最高工资\"></a></h5>\n<p>#查询每个工种有奖金的员工的最高工资</p>\n<p>select max（salsry），job_id from employee where comsion_pct is not null group by job_id</p>\n<p>#根据上述结果进行筛选，查询最高工资大于12000</p>\n<p>select max（salsry），job_id from employee where comsion_pct is not null group by job_id having max（salsry）&gt;12000</p>\n<h5 id=\"查询领导编号&gt;102的每个领导手下的员工最低工资大于5000的领导编号是哪个，以及最低工资\">查询领导编号&gt;102的每个领导手下的员工最低工资大于5000的领导编号是哪个，以及最低工资<a title=\"#查询领导编号&gt;102的每个领导手下的员工最低工资大于5000的领导编号是哪个，以及最低工资\" href=\"#查询领导编号&gt;102的每个领导手下的员工最低工资大于5000的领导编号是哪个，以及最低工资\"></a></h5>\n<p>#查询每个领导手下最低工资的员工</p>\n<p>select min（salsry），manager_id from employee group by manager_id</p>\n<p>#查询编号&gt;102，最低工资大于5000</p>\n<p>select min（salsry），manager_id from employee where manage&gt;102 group by manager_id having min（salsry）&gt;5000</p>\n<h5 id=\"按员工姓名长度分组，查询每一组员工个数&gt;5的有哪些\">按员工姓名长度分组，查询每一组员工个数&gt;5的有哪些<a title=\"#按员工姓名长度分组，查询每一组员工个数&gt;5的有哪些\" href=\"#按员工姓名长度分组，查询每一组员工个数&gt;5的有哪些\"></a></h5>\n<p>#查询每个长度的员工个数</p>\n<p>select count（*），length（last_name）from employee group by length（last_name）</p>\n<p>#查询员工个数&gt;5</p>\n<p>select count（<em>），length（last_name）from employee group by length（last_name）having  count（</em>）&gt;5</p>\n<h5 id=\"查询一下每个部门每个工种的平均工资\">查询一下每个部门每个工种的平均工资<a title=\"#查询一下每个部门每个工种的平均工资\" href=\"#查询一下每个部门每个工种的平均工资\"></a></h5>\n<p>select avg（*），department_id ，job_id from employee group by department_id ，job_id</p>\n<h5 id=\"查询一下每个部门每个工种的平均工资大于1000，并且按平均工资高低显示出来\">查询一下每个部门每个工种的平均工资大于1000，并且按平均工资高低显示出来<a title=\"#查询一下每个部门每个工种的平均工资大于1000，并且按平均工资高低显示出来\" href=\"#查询一下每个部门每个工种的平均工资大于1000，并且按平均工资高低显示出来\"></a></h5>\n<p>select avg（<em>），department_id ，job_id from employee where department_id is not null group by department_id ，job_id having avg（</em>）&gt;10000 order by  avg（*）desc</p>\n<h2 id=\"连接查询\">连接查询<a title=\"#连接查询\" href=\"#连接查询\"></a></h2>\n<p>含义：又称多表查询，当查询的字段来自于多个表时，就会用到连接查询</p>\n<p>笛卡尔集错误情况：select count（*）from beauty 假设输出12行</p>\n<p>​         select count（*）from boys 假设输出4行</p>\n<p>​         最终结果为 12*4=48</p>\n<p>如何发生：没有有效的连接条件</p>\n<p>避免发生：有有效的连接条件</p>\n<p>分类：按年代分类——sq192标准：仅仅支持内连接</p>\n<p>​          sq199标准：支持内连接+外连接（左外和右外）+交叉连接</p>\n<p>按功能分类——内连接：等值连接、非等值连接、自连接</p>\n<p>​                           外连接：左外连接、右外连接、圈外练就额</p>\n<p>​                            交叉连接</p>\n<h3 id=\"一、sql192语法\">一、sql192语法<a title=\"#一、sql192语法\" href=\"#一、sql192语法\"></a></h3>\n<h3 id=\"1、等值连接\">1、等值连接<a title=\"#1、等值连接\" href=\"#1、等值连接\"></a></h3>\n<p>特点：夺标等值连接的结果为夺标的交集部分；n表连接，至少需要</p>\n<p>​           N-1个连接条件；多表的顺序没有要求；一般需要为表起别名；可以搭</p>\n<p>​           配所有的子句</p>\n<p>​                    Beauty                                                                boys</p>\n<div class=\"φcy\"><div class=\"φda\"><table><thead>\n<tr>\n<th>Id</th>\n<th>Name</th>\n<th>Sex</th>\n<th>Boyfried-id</th>\n<th>Boyname</th>\n<th>Usercp</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>柳岩</td>\n<td>女</td>\n<td>6</td>\n<td>黄晓明</td>\n<td>100</td>\n</tr>\n<tr>\n<td>2</td>\n<td>热巴</td>\n<td>女</td>\n<td>2</td>\n<td>鹿晗</td>\n<td>800</td>\n</tr>\n<tr>\n<td>3</td>\n<td>周芷若</td>\n<td>女</td>\n<td>3</td>\n<td>张无忌</td>\n<td>30</td>\n</tr>\n<tr>\n<td>4</td>\n<td>周冬雨</td>\n<td>女</td>\n<td>7</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>5</td>\n<td>杨颖</td>\n<td>女</td>\n<td>1</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table></div></div><h4 id=\"查询女神名和对应的男神名\">查询女神名和对应的男神名<a title=\"#查询女神名和对应的男神名\" href=\"#查询女神名和对应的男神名\"></a></h4>\n<p>Select name,boyfriend from boys,beauty where beauty.boyfriend_id =<a href=\"http://boys.id\">boys.id</a>;</p>\n<h4 id=\"查询员工名和对应的部门名\">查询员工名和对应的部门名<a title=\"#查询员工名和对应的部门名\" href=\"#查询员工名和对应的部门名\"></a></h4>\n<p>Select last_name,department_name from employee,departments where</p>\n<p>Employee.department_id = department.department_id</p>\n<h4 id=\"查询员工名、工种号、工种名-起别名提高简洁读\">查询员工名、工种号、工种名 起别名提高简洁读<a title=\"#查询员工名、工种号、工种名-起别名提高简洁读\" href=\"#查询员工名、工种号、工种名-起别名提高简洁读\"></a></h4>\n<p>Select last_name,Employee.job_id，job_title  from employee e,jobs</p>\n<p>J where e.job_id = j.Job_id</p>\n<p>==PS：两个表顺序可以互换==</p>\n<p>==运行代码都是先执行from 在执行select，若使用了别名，则用别名==</p>\n<h4 id=\"查询有奖金的员工名、部门名\">查询有奖金的员工名、部门名<a title=\"#查询有奖金的员工名、部门名\" href=\"#查询有奖金的员工名、部门名\"></a></h4>\n<p>Select last_name,department_name from employee e,departments d where e.department_id = d.department_id and e.commission is not null</p>\n<h4 id=\"查询城市名字第二个字符为o对应的城市名和部门名\">查询城市名字第二个字符为o对应的城市名和部门名<a title=\"#查询城市名字第二个字符为o对应的城市名和部门名\" href=\"#查询城市名字第二个字符为o对应的城市名和部门名\"></a></h4>\n<p>Select department_name，city from departments d ，location l where</p>\n<p>D. location_id = l.location_id  and city like ‘_o%’</p>\n<h4 id=\"查询每个城市的部门个数\">查询每个城市的部门个数<a title=\"#查询每个城市的部门个数\" href=\"#查询每个城市的部门个数\"></a></h4>\n<p>Select count（*），city from departments d ，location l  where d.location id =l.location id group by city</p>\n<h4 id=\"查询有奖金的部门名和领导编号和该部门的最低工资\">查询有奖金的部门名和领导编号和该部门的最低工资<a title=\"#查询有奖金的部门名和领导编号和该部门的最低工资\" href=\"#查询有奖金的部门名和领导编号和该部门的最低工资\"></a></h4>\n<p>Select department_name，manager_id ，min(salary) from departments d ，employee e where d.department_id = e.department_id and commission_pct is not null group by  department_name,d.manager_id</p>\n<h4 id=\"查询每个工种的工种名和员工个数，并且按员工个数降序\">查询每个工种的工种名和员工个数，并且按员工个数降序<a title=\"#查询每个工种的工种名和员工个数，并且按员工个数降序\" href=\"#查询每个工种的工种名和员工个数，并且按员工个数降序\"></a></h4>\n<p>Select job_title,count(<em>) from employee e,jobs j where e.job_id = j.job_id group by job_title order by count(</em>)desc</p>\n<h4 id=\"查询员工名、部门名和所在的城市有s的字符\">查询员工名、部门名和所在的城市有s的字符<a title=\"#查询员工名、部门名和所在的城市有s的字符\" href=\"#查询员工名、部门名和所在的城市有s的字符\"></a></h4>\n<p>Select last_name,department_name ，city from employee e,departments d，location l where e.department_id = d.department_id and d.location_id = l.location_id and city like  ‘s%’</p>\n<h3 id=\"2、非等值连接--数值不是等于，而是在两个数之间\">2、非等值连接  数值不是等于，而是在两个数之间<a title=\"#2、非等值连接--数值不是等于，而是在两个数之间\" href=\"#2、非等值连接--数值不是等于，而是在两个数之间\"></a></h3>\n<p>查询员工工资和工资级别</p>\n<p>Select salary,grade_level from employee e,job_grades g where salary between g.lowest_sal and g.highest_sal</p>\n<h3 id=\"3、自连接--自己连接自己\">3、自连接  自己连接自己<a title=\"#3、自连接--自己连接自己\" href=\"#3、自连接--自己连接自己\"></a></h3>\n<p>查询员工名和上级的名字</p>\n<p>Select e.last_name,e.employee_id m.last_name,m.employee_id from employeee e,employees m where e.employee_id=m.employee_id</p>\n<h3 id=\"二、sql199语法\">二、sql199语法<a title=\"#二、sql199语法\" href=\"#二、sql199语法\"></a></h3>\n<p>==语法 : select 查询列表==</p>\n<p>==from 列表1 别名 【连接类型】==</p>\n<p>==join 列表2 别名 on 连接条件【where 筛选条件】==</p>\n<p>==【group by 分组】【having 筛选条件】【order by 排序列表】==</p>\n<p>分类:内连接:——inner</p>\n<p>外连接：左外——left 【outer】</p>\n<p>​               右外——rig ht【outer】</p>\n<p>​               全外——full【outer】</p>\n<p>交叉连接：cross</p>\n<p>==找谁谁就是主表==</p>\n<h3 id=\"1、内连接-（查询交集部分）\">1、内连接 （查询交集部分）<a title=\"#1、内连接-（查询交集部分）\" href=\"#1、内连接-（查询交集部分）\"></a></h3>\n<p>语法：select 查询列表</p>\n<p>from 列表1 别名 ==inner join== 列表2 别名 on 连接条件</p>\n<p>分类：等值连接、非等值连接、自连接</p>\n<p>特点：添加排序、筛选、分组</p>\n<p>==Inner可以省略==</p>\n<p>==筛选条件放where后面，连接条件放on后面，提高分离性，便于阅读==</p>\n<p>==#等值连接==</p>\n<h4 id=\"查询员工名、部门名\">查询员工名、部门名<a title=\"#查询员工名、部门名\" href=\"#查询员工名、部门名\"></a></h4>\n<p>Select last_name,department_name from employee e inner join departments d on e.department_id = d.department_id</p>\n<h4 id=\"查询名字中包含e的员工名和工种名\">查询名字中包含e的员工名和工种名<a title=\"#查询名字中包含e的员工名和工种名\" href=\"#查询名字中包含e的员工名和工种名\"></a></h4>\n<p>Select last_name,join_title from employee e inner join jobs j on e.job_id = j.job_id where e.last_name like “%e%”</p>\n<h4 id=\"查询部门个数&gt;3的城市名和部门个数（添加分组和筛选）\">查询部门个数&gt;3的城市名和部门个数（添加分组和筛选）<a title=\"#查询部门个数&gt;3的城市名和部门个数（添加分组和筛选）\" href=\"#查询部门个数&gt;3的城市名和部门个数（添加分组和筛选）\"></a></h4>\n<p>Select city,count(<em>)部门个数 from departments d inner join location l  on d.location_id = l.location_id group by city having count(</em>)&gt;3</p>\n<h4 id=\"查询哪个部门的员工个数&gt;3的部门名和员工个数，并按个数降序（添加排序）\">查询哪个部门的员工个数&gt;3的部门名和员工个数，并按个数降序（添加排序）<a title=\"#查询哪个部门的员工个数&gt;3的部门名和员工个数，并按个数降序（添加排序）\" href=\"#查询哪个部门的员工个数&gt;3的部门名和员工个数，并按个数降序（添加排序）\"></a></h4>\n<p>Select count(<em>)部门个数 ，departments_id from employee inner join departments d on e.department_id = d.department_id group by departments_name having count(</em>)&gt;3 order by count(*) desc</p>\n<h4 id=\"查询员工名、部门名、工种名、并按部门名降序（）\">查询员工名、部门名、工种名、并按部门名降序（）<a title=\"#查询员工名、部门名、工种名、并按部门名降序（）\" href=\"#查询员工名、部门名、工种名、并按部门名降序（）\"></a></h4>\n<p>Select last_name，departments_name，job_title  from employee e inner join departments d on e.department_id = d.department_id  inner join jobs j on e.jobs_id = j.jobs_id  order by departments_name desc</p>\n<h3 id=\"2、外连接（用于查询一个表中，另一个表没有的记录）\">2、外连接（用于查询一个表中，另一个表没有的记录）<a title=\"#2、外连接（用于查询一个表中，另一个表没有的记录）\" href=\"#2、外连接（用于查询一个表中，另一个表没有的记录）\"></a></h3>\n<p>特点：1==、如果从表中有和他匹配的，则显示匹配的值==</p>\n<p>==如果从表中没有和他匹配的，则显示null==</p>\n<p>==外连接查询结果=内连接结果+主表中有而从表没有的==</p>\n<p>2、<strong>左外连接：left join 左边的是主表  右外连接：right join右边的是主表</strong></p>\n<p>3、<strong>左外和右外交换两个表的顺序，可以实现同样的效果如果</strong></p>\n<p>用beauty匹配boys表，则beauty表为主体表，boys为从表，主表不变，从表填充</p>\n<p>4、全外连接=内连接结果+表1中有但表2中没有的+表2中有但表1中没有的</p>\n<h4 id=\"查询男朋友不在男神表的女神名\">查询男朋友不在男神表的女神名<a title=\"#查询男朋友不在男神表的女神名\" href=\"#查询男朋友不在男神表的女神名\"></a></h4>\n<p>左外：select <a href=\"http://b.name\">b.name</a> from beauty b left outer join boys bo on b.’noyfriend_id’=bo.’id’ where bo.’id’ is null</p>\n<h4 id=\"查询哪个部门没有员工\">查询哪个部门没有员工<a title=\"#查询哪个部门没有员工\" href=\"#查询哪个部门没有员工\"></a></h4>\n<p>左外：select d.*,e.employee_id  from department d left outer join employees e on d.’department_id’=e.’department_id’ where e.’employee_id’ is null</p>\n<p>右外：select d.*,e.employee_id  from employees e right outer join  department d on d.’department_id’=e.’department_id’ where e.’employee_id’ is null</p>\n<h3 id=\"3、全外连接（交集+两个表）\">3、全外连接（交集+两个表）<a title=\"#3、全外连接（交集+两个表）\" href=\"#3、全外连接（交集+两个表）\"></a></h3>\n<p>select bo.<em>,b.</em>  from beauty b ==full oute====r join== <a href=\"http://boys.bo\">boys.bo</a> on b.’boyfriend_id’=<a href=\"http://bo.id\">bo.id</a>’</p>\n<h3 id=\"4、交叉连接(乘积连接）\">4、交叉连接(乘积连接）<a title=\"#4、交叉连接(乘积连接）\" href=\"#4、交叉连接(乘积连接）\"></a></h3>\n<p>select bo.<em>,b.</em>  from beauty b ==full cross join== boys bo</p>\n<p>![img](file:///C:\\Users\\Administrator\\AppData\\Local\\Temp\\ksohtml13072\\wps12.jpg)</p>\n<p>![img](file:///C:\\Users\\Administrator\\AppData\\Local\\Temp\\ksohtml13072\\wps13.jpg)</p>\n<h2 id=\"子查询\">子查询<a title=\"#子查询\" href=\"#子查询\"></a></h2>\n<p>含义：出现在其他语句中的select语句，称为子查询或内查询</p>\n<p>​            外部的查询称为主查询或外查询</p>\n<p>分类：==按子查询出现的位置==</p>\n<p>select 后面：仅仅支持标量子查询</p>\n<p>from后面：支持表子查询</p>\n<p>where或having后面：标量子查询、 列子查询、行子查询</p>\n<p>exists后面–相关子查询：表子查询</p>\n<p>==按结果集行列数不同==       标量子查询（结果集只有一行一列）</p>\n<p>​                                          列子查询（结果集只有一列多行）</p>\n<p>​                                          行子查询（结果集只有一行多列）</p>\n<p>​                                          表子查询（结果集一般为多行多列）</p>\n<p>![img](file:///C:\\Users\\Administrator\\AppData\\Local\\Temp\\ksohtml13072\\wps14.jpg)</p>\n<h3 id=\"一、where或having后面\">一、where或having后面<a title=\"#一、where或having后面\" href=\"#一、where或having后面\"></a></h3>\n<p>标量子查询（单行子查询）、列子查询（多行子查询）、行子查询（多列多行）</p>\n<p>特点：1、子查询放在小括号内</p>\n<p>​            2、子查询放在条件右侧</p>\n<p>​            3、 ==标量子查询：一般搭配单行操作符使用&lt; 、&gt; 、&lt;=、 &gt;=、=、&lt;&gt;不==</p>\n<p>​                   ==等于==</p>\n<p>列子查询：一般搭配多行操作符使用in、and/some、all</p>\n<p>==子查询的执行优先于主查迅执行，主查迅的条件用到了子查询的结果==</p>\n<h4 id=\"1、标量子查询\">1、标量子查询<a title=\"#1、标量子查询\" href=\"#1、标量子查询\"></a></h4>\n<h5 id=\"查询谁的工资比abel高\">查询谁的工资比Abel高<a title=\"#查询谁的工资比abel高\" href=\"#查询谁的工资比abel高\"></a></h5>\n<p>​     #查询Abel工资</p>\n<p>select salary from employee where last_name = ‘Abel’</p>\n<p>​     #查询员工工资，满足salsry&gt;上述结果</p>\n<p>select * from employee where salsry&gt;（ select salary from</p>\n<p>Employee where last_name = ‘Abel’）；</p>\n<h5 id=\"返回job_id与141号员工相同，salary比143号员工多的员的姓名、job_id和工资\">返回job_id与141号员工相同，salary比143号员工多的员的姓名、job_id和工资<a title=\"#返回job_id与141号员工相同，salary比143号员工多的员的姓名、job_id和工资\" href=\"#返回job_id与141号员工相同，salary比143号员工多的员的姓名、job_id和工资\"></a></h5>\n<p>​     #查询143号员工</p>\n<p>select salary from employee where job_id =143;</p>\n<p>​    #job_id与141号员工相同,salary比143号员工多的员工的姓名、job_id和工资</p>\n<p>select last_name、job_id、salary from employee where salsry&gt;(select last_name from employee where employee_id =143) &amp;&amp; job_id = 141;</p>\n<h5 id=\"返回公司工资最少的员工名字、job_id和salary\">返回公司工资最少的员工名字、job_id和salary<a title=\"#返回公司工资最少的员工名字、job_id和salary\" href=\"#返回公司工资最少的员工名字、job_id和salary\"></a></h5>\n<p>​    #查询工资最低工资</p>\n<p>select min（salary） from employee ;</p>\n<p>​     #查询员工名字、job_id和salary</p>\n<p>select last_name,job_id,salsry from employee where salary=( select min（salary） from employee );</p>\n<h5 id=\"查询最低工资大于50号部门最低工资的部门id和其最低工资\">查询最低工资大于50号部门最低工资的部门id和其最低工资<a title=\"#查询最低工资大于50号部门最低工资的部门id和其最低工资\" href=\"#查询最低工资大于50号部门最低工资的部门id和其最低工资\"></a></h5>\n<p>#50号部门最低工资</p>\n<p>select min（salary）from employee where department_id =50;</p>\n<p>#查询每个部门的最低工资</p>\n<p>select min（salary），department_id from employee group by department_id;</p>\n<p>#查询满足最低工资大于50号部门</p>\n<p>select min（salary），department_id from employee group by department_id having min（salary）&gt;(select min（salary）from employee where department_id =50);</p>\n<h4 id=\"2、列子查询（多行子查询）\">2、列子查询（多行子查询）<a title=\"#2、列子查询（多行子查询）\" href=\"#2、列子查询（多行子查询）\"></a></h4>\n<p>==操作符：in/not in 等于列表中的任意一个   指一个数列==</p>\n<p>​               ==Any/some 和子查询返回某一个值比较==</p>\n<p>​               ==All 和子查询返回的所有值比较==</p>\n<h5 id=\"返回location_id是1400或1700的部门中的所有员工姓名\">返回location_id是1400或1700的部门中的所有员工姓名<a title=\"#返回location_id是1400或1700的部门中的所有员工姓名\" href=\"#返回location_id是1400或1700的部门中的所有员工姓名\"></a></h5>\n<p>#查询location_id是1400或1700的部门编号</p>\n<p>select  department_id from department  where location_id in（1400，1700）</p>\n<p>​    #查询员工姓名，要求部门号是上述列表中的某一个</p>\n<p>select last_name from employee where department_id in（select  department_id from department  where location_id in（1400，1700））</p>\n<h5 id=\"返回其他部工种比job_id为‘it_frog“工种任意工资低的员工的员工号、姓名、job_id、以及salary\">返回其他部工种比job_id为‘IT_FROG“工种任意工资低的员工的员工号、姓名、job_id、以及salary<a title=\"#返回其他部工种比job_id为‘it_frog“工种任意工资低的员工的员工号、姓名、job_id、以及salary\" href=\"#返回其他部工种比job_id为‘it_frog“工种任意工资低的员工的员工号、姓名、job_id、以及salary\"></a></h5>\n<p>#查询job_id为‘IT_FROG“部门任意工资</p>\n<p>Select distinct salary from employee where job_id=“IT_FROG”<br>\n#查询员工号、姓名、job_id、以及salary，salary&lt;上述条件的任</p>\n<p>意一个</p>\n<p>select last_name ，employee_id ,job_id ,salary from employee where salary &lt; any（Select distinct salary from employee where job_id=“IT_FROG”) and job_id &lt;&gt; ‘IT_PROG’</p>\n<h4 id=\"3、行子查询（结果集一行多列或多行多列）\">3、行子查询（结果集一行多列或多行多列）<a title=\"#3、行子查询（结果集一行多列或多行多列）\" href=\"#3、行子查询（结果集一行多列或多行多列）\"></a></h4>\n<h5 id=\"查询员工编号最小并且工资最高的员工信息\">查询员工编号最小并且工资最高的员工信息<a title=\"#查询员工编号最小并且工资最高的员工信息\" href=\"#查询员工编号最小并且工资最高的员工信息\"></a></h5>\n<p>#查询员工编号最小</p>\n<p>select min（employee_id）  from employee</p>\n<p>#查询工资最高</p>\n<p>Select max（salary） from employee</p>\n<p>#查询员工信息</p>\n<p>Select * from employee where employee_id =（select min（employee_id）  from employee ）and salary =（Select max（salary） from employee</p>\n<p>）</p>\n<h3 id=\"二、放在select后面-（一定要起别名）\">二、放在select后面 （一定要起别名）<a title=\"#二、放在select后面-（一定要起别名）\" href=\"#二、放在select后面-（一定要起别名）\"></a></h3>\n<h4 id=\"查询每个部门的员工个数\">查询每个部门的员工个数<a title=\"#查询每个部门的员工个数\" href=\"#查询每个部门的员工个数\"></a></h4>\n<p>Select d.*，(</p>\n<p>Select count(*)  from employee where e.department_id = d.department_id</p>\n<p>) from department d where employee_id =（select min（employee_id）  from employee ）and salary =（Select max（salary） from employee</p>\n<p>）</p>\n<h4 id=\"查询员工个号=102的部门名\">查询员工个号=102的部门名<a title=\"#查询员工个号=102的部门名\" href=\"#查询员工个号=102的部门名\"></a></h4>\n<p>Select (select department_name,e.department_id  from department inner join employee e on d.department_id = e.department_id where e.employee_id = 102)部门名;</p>\n<h3 id=\"三、from后面，将子查询查到的数据当作表格\">三、from后面，将子查询查到的数据当作表格<a title=\"#三、from后面，将子查询查到的数据当作表格\" href=\"#三、from后面，将子查询查到的数据当作表格\"></a></h3>\n<h4 id=\"查询每个部门的平均工资的工资等级\">查询每个部门的平均工资的工资等级<a title=\"#查询每个部门的平均工资的工资等级\" href=\"#查询每个部门的平均工资的工资等级\"></a></h4>\n<p>#查询每个部门的平均工资</p>\n<p>Select avg（salary），department_id from department group by department_id</p>\n<p>​    #查询工资等级</p>\n<p>Select * from department job_grade</p>\n<p>​    #连接上述结果，筛选条件平均工资 between lowest_sal和highest_sal</p>\n<p>Selec ag_dep.*,g.grade_level</p>\n<p>from（</p>\n<p>Select avg（salary），department_id</p>\n<p>from department</p>\n<p>group by department_id</p>\n<p>）ag_dep</p>\n<p>Inner join job_grade g on ag_dep.ag  between lowest_sal和haighest_sal</p>\n<h3 id=\"四、exists后面（相关子查询）是否存在，是个布尔类型，1代表true\">四、exists后面（相关子查询）是否存在，是个布尔类型，1代表true<a title=\"#四、exists后面（相关子查询）是否存在，是个布尔类型，1代表true\" href=\"#四、exists后面（相关子查询）是否存在，是个布尔类型，1代表true\"></a></h3>\n<p>==先执行外查询==</p>\n<p>语法：exists（完整查询语句） 结果：1或0</p>\n<p>Select exists（select employee_id from employees）；有没有值</p>\n<h4 id=\"查询有员工的部门名\">查询有员工的部门名<a title=\"#查询有员工的部门名\" href=\"#查询有员工的部门名\"></a></h4>\n<p>Select department_name from departments where exists(select</p>\n<p>* from employee e where d.departmenr_id = e.department_id)</p>\n<p>Select department_name from departments d where d.’department_id ’ in(select Department_id from employee )</p>\n<p>==标量子查询用=   列子查询用in==</p>\n<h4 id=\"查询没有女朋友的男神信息\">查询没有女朋友的男神信息<a title=\"#查询没有女朋友的男神信息\" href=\"#查询没有女朋友的男神信息\"></a></h4>\n<p>Select bo.* from boys bo where <a href=\"http://bo.id\">bo.id</a> not in(select Boyfriend_id from beauty )</p>\n<p>Select bo.* from boys bo where not exist(select Boyfriend_id from beauty b where bo.’id’=b.’boyfriend_id’ )</p>\n<h2 id=\"分页查询*\">分页查询*<a title=\"#分页查询*\" href=\"#分页查询*\"></a></h2>\n<p>应用场景：网站上的第1、2…页，显示不全，不是从服务器全部下载内容，提交sql语句只查询想要页面</p>\n<p>语法：select 查询列表</p>\n<p>​            from 表</p>\n<p>​            【join type join 表2</p>\n<p>​            on 连接条件</p>\n<p>​            where 筛选条件</p>\n<p>​             group by 分组字段</p>\n<p>​             having  分组后的筛选</p>\n<p>​             order by 排序的字段 】</p>\n<p>​             ==limit offset 起始索引（从0开始） size 条目数 ；==</p>\n<p>特点：limit语句在查询语句的最后，执行顺序也在最后</p>\n<p>​            公式：要显示的页数为page 每页的条目数size</p>\n<p>​                       select 查询列表</p>\n<p>​                       from 表</p>\n<p>​                      ==limit offset 起始索引（page-1*size） size 条目数 ；==</p>\n<h5 id=\"例1-查询前五条员工信息\">例1 查询前五条员工信息<a title=\"#例1-查询前五条员工信息\" href=\"#例1-查询前五条员工信息\"></a></h5>\n<p>select *from employee limit 0，5；</p>\n<p>从第一条开始也可以写成select *from employee limit 5；</p>\n<h5 id=\"例2-查询第11条到25条\">例2 查询第11条到25条<a title=\"#例2-查询第11条到25条\" href=\"#例2-查询第11条到25条\"></a></h5>\n<p>select *from employee limit 10，15；</p>\n<h5 id=\"例3-查询有奖金的员工信息，并且工资较高前10名显示出来\">例3 查询有奖金的员工信息，并且工资较高前10名显示出来<a title=\"#例3-查询有奖金的员工信息，并且工资较高前10名显示出来\" href=\"#例3-查询有奖金的员工信息，并且工资较高前10名显示出来\"></a></h5>\n<p>select *from employee where commission_pct is not null order by salary desc limit 0，10；</p>\n<h2 id=\"联合查询\">联合查询<a title=\"#联合查询\" href=\"#联合查询\"></a></h2>\n<p>union 联合 合并；将多条查询语句的结果合并为一个结果，大条件拆分</p>\n<p>语法：查询语句1</p>\n<p>​            union</p>\n<p>​            查询语句2</p>\n<p>应用场景：要查询的结果来自于多个表，且没有联系，而查询信息一样，==且查询列数相同====，顺序名一致====，去掉重复项，不想去重则为union all==</p>\n<h5 id=\"例1-查询部门编号&gt;90，或邮箱中包含a的员工信息\">例1 查询部门编号&gt;90，或邮箱中包含A的员工信息<a title=\"#例1-查询部门编号&gt;90，或邮箱中包含a的员工信息\" href=\"#例1-查询部门编号&gt;90，或邮箱中包含a的员工信息\"></a></h5>\n<p>select *from employee where email like ‘%a%’ or department_id &gt;90;</p>\n<p>select *from employee where email like ‘%a%’</p>\n<p>union</p>\n<p>select *from employee where department_id &gt;90;</p>\n<h5 id=\"例2-查询中国用户男性的用户信息以及外国用户男性的用户信息\">例2 查询中国用户男性的用户信息以及外国用户男性的用户信息<a title=\"#例2-查询中国用户男性的用户信息以及外国用户男性的用户信息\" href=\"#例2-查询中国用户男性的用户信息以及外国用户男性的用户信息\"></a></h5>\n<p>select id，cname，csex from t_ca  where csex = 男；</p>\n<p>union</p>\n<p>select t_id , tname , tgender from t_ua employee where tgender = ‘male’；</p>\n<h1 id=\"dml语言-数据操作语言*\">DML语言 数据操作语言*<a title=\"#dml语言-数据操作语言*\" href=\"#dml语言-数据操作语言*\"></a></h1>\n<p>插入：insert</p>\n<p>修改：update</p>\n<p>删除：delete</p>\n<h2 id=\"一、插入语句\">一、插入语句<a title=\"#一、插入语句\" href=\"#一、插入语句\"></a></h2>\n<p>语法：表名 列名新值</p>\n<p>​           方式一：</p>\n<p>​            insert into 表名（列名，…）values（值,…);</p>\n<p>​            方式二：</p>\n<p>​            insert into 表名（列名，…）set 列名=值，列名=值;</p>\n<h5 id=\"两种方式大pk\">两种方式大PK<a title=\"#两种方式大pk\" href=\"#两种方式大pk\"></a></h5>\n<p>1、方式一支持多行，方式二不支持</p>\n<p>insert into beauty values（13，‘唐艺昕1’，‘女’，‘1990-4-23’，‘12344444’，null，2)，（14，‘唐艺昕2’，‘女’，‘1990-4-23’，‘12344444’，null，2)，（15，‘唐艺昕3’，‘女’，‘1990-4-23’，‘12344444’，null，2)，</p>\n<p>2、方式一支持子查询，方式二不支持</p>\n<p>insert into beauty（id，name，phone）select（26，‘宋茜’，‘12344444’，null，2);</p>\n<p>==把结果集插进里面==</p>\n<p>insert into beauty（id，name，phone）select/id，name，‘12344444’（26，‘宋茜’，‘12344444’，null，2)from boys where id&lt;3</p>\n<h5 id=\"1-插入值的类型和列的类型一致或兼容\">1 插入值的类型和列的类型一致或兼容<a title=\"#1-插入值的类型和列的类型一致或兼容\" href=\"#1-插入值的类型和列的类型一致或兼容\"></a></h5>\n<p>insert into beauty（id，name，sex，borndate，phone，photo ，boyfriend，boyfriend_id）values（13，‘唐艺昕’，‘女’，‘1990-4-23’，‘12344444’，null，2);</p>\n<h5 id=\"2-不可以为null的列必须插入值，可以为null的列如何插入值\">2 不可以为null的列必须插入值，可以为null的列如何插入值<a title=\"#2-不可以为null的列必须插入值，可以为null的列如何插入值\" href=\"#2-不可以为null的列必须插入值，可以为null的列如何插入值\"></a></h5>\n<p>方式一 ： insert into beauty（id，name，sex，borndate，phone，photo ，boyfriend，boyfriend_id）values（13，‘唐艺昕’，‘女’，‘1990-4-23’，‘12344444’，null，2);</p>\n<p>方式二： insert into beauty（id，name，sex，borndate，phone，photo ，boyfriend，boyfriend_id）values（13，‘唐艺昕’，‘女’，‘1990-4-23’，‘12344444’，2);</p>\n<h5 id=\"3-列的顺序是否可以调换，可以要一一对应\">3 列的顺序是否可以调换，可以要一一对应<a title=\"#3-列的顺序是否可以调换，可以要一一对应\" href=\"#3-列的顺序是否可以调换，可以要一一对应\"></a></h5>\n<h5 id=\"4-列数和值的个数必须匹配\">4 列数和值的个数必须匹配<a title=\"#4-列数和值的个数必须匹配\" href=\"#4-列数和值的个数必须匹配\"></a></h5>\n<h5 id=\"==5-可以省略列名，默认所有列，而且列的顺序和表的顺序相同==\">==5 可以省略列名，默认所有列，而且列的顺序和表的顺序相同==<a title=\"#==5-可以省略列名，默认所有列，而且列的顺序和表的顺序相同==\" href=\"#==5-可以省略列名，默认所有列，而且列的顺序和表的顺序相同==\"></a></h5>\n<h2 id=\"二、修改语句\">二、修改语句<a title=\"#二、修改语句\" href=\"#二、修改语句\"></a></h2>\n<p>应用：==修改单表的记录==</p>\n<p>​            语法：update 表名    1</p>\n<p>​                       set 列=新值，列=新值…       3</p>\n<p>​                       where 筛选条件；  2</p>\n<p>​            修改多表的记录【补充】</p>\n<p>​            语法：（192）update 表1 别名，表2 别名</p>\n<p>​                       set 列=新值，列=新值…</p>\n<p>​                       where 连接条件</p>\n<p>​                       and 筛选条件</p>\n<p>​                         （199）update 表1 别名</p>\n<p>​                       inner 、left 、right  join 表2 别名</p>\n<p>​                       on 连接条件</p>\n<p>​                       set 列=新值，列=新值…</p>\n<p>​                       where 筛选条件</p>\n<h4 id=\"修改单表\">修改单表<a title=\"#修改单表\" href=\"#修改单表\"></a></h4>\n<h5 id=\"例1-修改beauty姓唐的女生电话修改为12222222\">例1 修改beauty姓唐的女生电话修改为12222222<a title=\"#例1-修改beauty姓唐的女生电话修改为12222222\" href=\"#例1-修改beauty姓唐的女生电话修改为12222222\"></a></h5>\n<p>update beauty  set phone=‘122222222’   where name like ‘唐%’；</p>\n<h5 id=\"例2-修改boy表中id号为2的名称为张飞，魅力值10\">例2 修改boy表中id号为2的名称为张飞，魅力值10<a title=\"#例2-修改boy表中id号为2的名称为张飞，魅力值10\" href=\"#例2-修改boy表中id号为2的名称为张飞，魅力值10\"></a></h5>\n<p>update boy  setname=‘张飞’   ，usercp=10；</p>\n<h4 id=\"修改多表\">修改多表<a title=\"#修改多表\" href=\"#修改多表\"></a></h4>\n<h5 id=\"例1-修改张无忌女朋友的手机号为114\">例1 修改张无忌女朋友的手机号为114<a title=\"#例1-修改张无忌女朋友的手机号为114\" href=\"#例1-修改张无忌女朋友的手机号为114\"></a></h5>\n<p>update boy b inner join beauty be  on b.girl_id = be.girl_id set phone=‘114’  where b.boyname = ‘张无忌’ ;</p>\n<h5 id=\"例2-修改没有男朋友的女神的男朋友的编号都为2号\">例2 修改没有男朋友的女神的男朋友的编号都为2号<a title=\"#例2-修改没有男朋友的女神的男朋友的编号都为2号\" href=\"#例2-修改没有男朋友的女神的男朋友的编号都为2号\"></a></h5>\n<p>update boy b right join beauty be  on <a href=\"http://b.id\">b.id</a> = be.boyfriend_id set be.boyfriend_id=‘2’  where <a href=\"http://b.id\">b.id</a> is null;</p>\n<h2 id=\"三、删除语句\">三、删除语句<a title=\"#三、删除语句\" href=\"#三、删除语句\"></a></h2>\n<p>方式一：==delete 删除一列==</p>\n<p>语法：==单表删除==</p>\n<p>​           delete from 表名 where 筛选条件</p>\n<p>​            ==多表删除==</p>\n<p>​           delete（若删除表1内容，则在这里要写表1） 别名 from 表1，别名 ，</p>\n<p>​           表 2，别名 where 连接条件 and 筛选  条件</p>\n<p>方式二：truncate  ==整个表都删除，不能加where条件==</p>\n<p>语法：truncate table 表名；</p>\n<h3 id=\"方式一\">方式一<a title=\"#方式一\" href=\"#方式一\"></a></h3>\n<h4 id=\"单表的删除\">单表的删除<a title=\"#单表的删除\" href=\"#单表的删除\"></a></h4>\n<h5 id=\"例1-删除手机编号为9的女神信息\">例1 删除手机编号为9的女神信息<a title=\"#例1-删除手机编号为9的女神信息\" href=\"#例1-删除手机编号为9的女神信息\"></a></h5>\n<p>delete from beauty where phone like ’%9‘</p>\n<h4 id=\"多表的删除\">多表的删除<a title=\"#多表的删除\" href=\"#多表的删除\"></a></h4>\n<h5 id=\"例1-删除张无忌女朋友的信息\">例1 删除张无忌女朋友的信息<a title=\"#例1-删除张无忌女朋友的信息\" href=\"#例1-删除张无忌女朋友的信息\"></a></h5>\n<p>delete b from beauty b inner join boys bo on b.boyfriend_id</p>\n<p>= bo .id where bo.boyname = ‘张无忌’</p>\n<h5 id=\"例2-删除黄晓明以及她女朋友的信息\">例2 删除黄晓明以及她女朋友的信息<a title=\"#例2-删除黄晓明以及她女朋友的信息\" href=\"#例2-删除黄晓明以及她女朋友的信息\"></a></h5>\n<p>delete b ，bo from beauty b inner join boys bo on b.boyfriend_id</p>\n<p>= bo .id where bo.boyname = ‘黄晓明’</p>\n<h3 id=\"方式二\">方式二<a title=\"#方式二\" href=\"#方式二\"></a></h3>\n<h5 id=\"例1-删除魅力值&gt;100的男神信息\">例1 删除魅力值&gt;100的男神信息<a title=\"#例1-删除魅力值&gt;100的男神信息\" href=\"#例1-删除魅力值&gt;100的男神信息\"></a></h5>\n<p>truncate table boys；</p>\n<h2 id=\"区别【面试题】\">区别【面试题】<a title=\"#区别【面试题】\" href=\"#区别【面试题】\"></a></h2>\n<p>1、truncate  整个表都删除，不能加where条件，效率高，</p>\n<p>2、假如要删除的表中有自增长列，用delete删除后，再插入数据，自增长列的值从断点开始；用truncate删除后，再插入数据，自增长列的值从1开始；</p>\n<p>3、truncate删除没有返回值  delete删除有返回值，系统提示</p>\n<p>4、truncate删除不能回滚，delete删除能够回滚</p>\n<!--*p109 7*-->\n<h1 id=\"ddl语言--数据定义语言\">DDL语言  数据定义语言<a title=\"#ddl语言--数据定义语言\" href=\"#ddl语言--数据定义语言\"></a></h1>\n<p>设计库和表的管理和操作</p>\n<p>一、库的管理</p>\n<p>创建        修改     删除</p>\n<p>二、表的管理</p>\n<p>创建        修改          删除</p>\n<p>创建：create</p>\n<p>修改：alter 修改表和库的结构</p>\n<p>删除：drop 删除表和库</p>\n<h2 id=\"一、库的管理\">一、库的管理<a title=\"#一、库的管理\" href=\"#一、库的管理\"></a></h2>\n<h3 id=\"1、库的创建\">1、库的创建<a title=\"#1、库的创建\" href=\"#1、库的创建\"></a></h3>\n<p>语法：creat database 库名</p>\n<h5 id=\"例1-创建库book-（mysql的data文件夹里，重复的库名报错）\">例1 创建库book （mysql的data文件夹里，重复的库名报错）<a title=\"#例1-创建库book-（mysql的data文件夹里，重复的库名报错）\" href=\"#例1-创建库book-（mysql的data文件夹里，重复的库名报错）\"></a></h5>\n<p>create database book；</p>\n<p>提高容错性：create database book if not exists book；</p>\n<h3 id=\"2、库的修改\">2、库的修改<a title=\"#2、库的修改\" href=\"#2、库的修改\"></a></h3>\n<p>==不能修改库名==</p>\n<p>更改库的字符集：alter database book character set gbk</p>\n<h3 id=\"3、库的删除\">3、库的删除<a title=\"#3、库的删除\" href=\"#3、库的删除\"></a></h3>\n<p>drop database if exists book</p>\n<h2 id=\"二、表的管理\">二、表的管理<a title=\"#二、表的管理\" href=\"#二、表的管理\"></a></h2>\n<h3 id=\"1、表的创建\">1、表的创建<a title=\"#1、表的创建\" href=\"#1、表的创建\"></a></h3>\n<p>语法： create table 表名{</p>\n<p>​                       列名 列的类型 【（长度)约束 】,</p>\n<p>​                       列名 列的类型 【（长度)约束 】,</p>\n<p>​                       列名 列的类型 【（长度)约束 】,</p>\n<p>​                       …</p>\n<p>}</p>\n<h5 id=\"例1-创建表book\">例1 创建表book<a title=\"#例1-创建表book\" href=\"#例1-创建表book\"></a></h5>\n<p>create table if not exists book{</p>\n<p>​           id int，</p>\n<p>​           bName vachar（20），</p>\n<h3 id=\"2、表的修改\">2、表的修改<a title=\"#2、表的修改\" href=\"#2、表的修改\"></a></h3>\n<h4 id=\"修改列名\">修改列名<a title=\"#修改列名\" href=\"#修改列名\"></a></h4>\n<p>alter table book <strong>change</strong> publishdate==（旧列名）== pubdate ==（新的列名)==  datetime==（类型）==;</p>\n<h4 id=\"列的类型或约束\">列的类型或约束<a title=\"#列的类型或约束\" href=\"#列的类型或约束\"></a></h4>\n<p>alter table book <strong>modify</strong> pubdate timestamp==（新类名）==</p>\n<h4 id=\"添加新列\">添加新列<a title=\"#添加新列\" href=\"#添加新列\"></a></h4>\n<p>alter table author <strong>add</strong> annual ==（新列名）==double==（类型）==</p>\n<h4 id=\"删除列\">删除列<a title=\"#删除列\" href=\"#删除列\"></a></h4>\n<p>alter table author <strong>drop</strong> annual double</p>\n<h4 id=\"修改表名\">修改表名<a title=\"#修改表名\" href=\"#修改表名\"></a></h4>\n<p>alter table author <strong>rename</strong> to book_name</p>\n<h3 id=\"3、表的删除\">3、表的删除<a title=\"#3、表的删除\" href=\"#3、表的删除\"></a></h3>\n<p>drop table authon；</p>\n<p>查看当前表: show tables</p>\n<p>==创建通用写法==</p>\n<p>==drop database  if exists 旧的库名/表名==</p>\n<p>==create table 新的库名/表名==</p>\n<h3 id=\"4、表的复制\">4、表的复制<a title=\"#4、表的复制\" href=\"#4、表的复制\"></a></h3>\n<p>insert into  authon values（1，’村上春树‘，’日本‘）（2，’莫言‘，’中国‘）</p>\n<h4 id=\"1)仅仅复制表的结构\">1)仅仅复制表的结构<a title=\"#1)仅仅复制表的结构\" href=\"#1)仅仅复制表的结构\"></a></h4>\n<p>create table copy like authon</p>\n<h4 id=\"2）复制表的结构和数据\">2）复制表的结构和数据<a title=\"#2）复制表的结构和数据\" href=\"#2）复制表的结构和数据\"></a></h4>\n<p>create table copy2 select*from authon；</p>\n<h4 id=\"3）只复制部分数据\">3）只复制部分数据<a title=\"#3）只复制部分数据\" href=\"#3）只复制部分数据\"></a></h4>\n<p>create table copy3 select id ，name from authon</p>\n<h4 id=\"4）仅仅复制某些字段-不要数据\">4）仅仅复制某些字段 不要数据<a title=\"#4）仅仅复制某些字段-不要数据\" href=\"#4）仅仅复制某些字段-不要数据\"></a></h4>\n<p>create table copy4 select id ，name from authon where 1=2（绝对不成立）</p>\n<h1 id=\"常见的数据类型\">常见的数据类型<a title=\"#常见的数据类型\" href=\"#常见的数据类型\"></a></h1>\n<p>数值型：</p>\n<p>​               整型</p>\n<p>​               小数：定点数(精度较高)、浮点数</p>\n<p>​               字符型：较短文本——char、varchar</p>\n<p>​                              较长文本——text、blob（较长的二进制数据）</p>\n<p>​               日期型</p>\n<h2 id=\"一、整型\">一、整型<a title=\"#一、整型\" href=\"#一、整型\"></a></h2>\n<p>分类：tinyint  smallint madiumint  int/integer  bigint</p>\n<p>字节：     1             2              3                    4               8</p>\n<h3 id=\"1、如何设置无符号和有符号\">1、如何设置无符号和有符号<a title=\"#1、如何设置无符号和有符号\" href=\"#1、如何设置无符号和有符号\"></a></h3>\n<p>create table tab_int (</p>\n<p>​         t1 int  <em><strong>加了zerofull 不满的长度会填充为零</strong></em>  ==默认有符号 长度11 可自==</p>\n<p>​    ==己设置== ==但是查询他范围长度== ==输出的是它的字节的那个长度==</p>\n<p>​         t1 int  unsigned   ==默认无符号  长度10== ==可自己设置== ==但是查询他范围长度==</p>\n<p>​         ==输出的是它的字节的那个长度==</p>\n<p>)</p>\n<h3 id=\"2、插入的数值超出范围后，会报out-of-range-异常，并且插入临界值\">2、插入的数值超出范围后，会报out of range 异常，并且插入临界值<a title=\"#2、插入的数值超出范围后，会报out-of-range-异常，并且插入临界值\" href=\"#2、插入的数值超出范围后，会报out-of-range-异常，并且插入临界值\"></a></h3>\n<h2 id=\"二、小数\">二、小数<a title=\"#二、小数\" href=\"#二、小数\"></a></h2>\n<h2 id=\"1、浮点型\">1、浮点型<a title=\"#1、浮点型\" href=\"#1、浮点型\"></a></h2>\n<p>double（M,D）</p>\n<p>float（M,D）</p>\n<h2 id=\"2、定点型\">2、定点型<a title=\"#2、定点型\" href=\"#2、定点型\"></a></h2>\n<p>dec(M,D)</p>\n<p>decimal(M,D)</p>\n<h3 id=\"特点：-1\">特点：<a title=\"#特点：-1\" href=\"#特点：-1\"></a></h3>\n<p>1、M代表整数部位和小数部位的长度，D代表小数部位，如果超过范围，则    插入临界值</p>\n<p>2、M和D可以省略；==如果是decimal，则M默认为10，D默认为0；如果是float和double，则会随着插入的数值的精度来决定精度==</p>\n<p>3、定点型的精确度较高，如果要求插入的数值精度较高如货币运算等则考虑使用</p>\n<h2 id=\"原则\">原则<a title=\"#原则\" href=\"#原则\"></a></h2>\n<p>所选择的类型越简单越好，能保存数值的类型越小越好，节省空间</p>\n<h2 id=\"三、字符型\">三、字符型<a title=\"#三、字符型\" href=\"#三、字符型\"></a></h2>\n<p>较短的文本：</p>\n<p>char（M）==M可以省略，默认为1==</p>\n<p>varchar（M）==M不可以省略==</p>\n<p><strong>区别：M代表最大的字符数，char代表固定长度的字符，varchar代表可变长度的字符，char比较耗费空间但效率高</strong></p>\n<p>较长的文本：</p>\n<p>text</p>\n<p>blob(较大的二进制)</p>\n<p>其他：</p>\n<p>binary和varbinary用于保存较短的二进制</p>\n<p>enum用于保存枚举</p>\n<p>set用于保存集合</p>\n<h2 id=\"四、enum类型-枚举\">四、Enum类型 枚举<a title=\"#四、enum类型-枚举\" href=\"#四、enum类型-枚举\"></a></h2>\n<p>要求插入的值必须属于列表中指定的值之一，==不分大小写，但最后也是结果和枚举设定的值一样==</p>\n<p>create table tab_char(</p>\n<p>​         t1 enum（‘a’，‘b’，‘c’），</p>\n<p>）；</p>\n<p>insert into tab_char values（‘A’）</p>\n<h2 id=\"五、set类型\">五、Set类型<a title=\"#五、set类型\" href=\"#五、set类型\"></a></h2>\n<p>==Set类型一次可以选取多个成员，而enum只能选一个==，根据成本个数不同，存储所占的字节不同</p>\n<p>create table tab_char(</p>\n<p>​         t1 enum（‘a’，‘b’，‘c’）</p>\n<p>）；</p>\n<p>insert into tab_char values（‘A’,‘B’）</p>\n<h2 id=\"六、日期型\">六、日期型<a title=\"#六、日期型\" href=\"#六、日期型\"></a></h2>\n<p>date      1000-2-3</p>\n<p>datetime             1000-2-3  00:00:00</p>\n<p>timestamp          1000年的某个时刻</p>\n<p>time         00：00：00</p>\n<p>year          1000</p>\n<h3 id=\"datetime和timestamp区别\">datetime和timestamp区别<a title=\"#datetime和timestamp区别\" href=\"#datetime和timestamp区别\"></a></h3>\n<p>1、datetime取值范围：1000-1-1至9999-12-31；timestamp支持的时间范围小，取值范围：1970 01 01 080001至2038年的某个时间</p>\n<p>2、==datetime只能反映出插入时的当地时区 ，timestamp和实际时区有关，更能反映出实际日期==</p>\n<h1 id=\"常见的约束\">常见的约束<a title=\"#常见的约束\" href=\"#常见的约束\"></a></h1>\n<p>含义: 一种限制，用于限制表中的数据，为了保证表中数据的准确和可靠性</p>\n<p>例如：李四插入1号，但张三也插入了1号，这就是因为没限制而引起的混乱</p>\n<p>==分类：六大约束==</p>\n<p>​    <strong>not null</strong> 非空约束，保证该字段的值不能为空，比如姓名、学号</p>\n<p>​    <strong>default</strong> 默认，用于保证该字段有默认值 ，比如性别</p>\n<p>​    <strong>primary  key</strong> 主键，用于保证该字段的值有唯一性，==并且非空==，比如学号</p>\n<p>​    <strong>unique</strong> 唯一约束 ，用于保证该字段有唯一性，==可以为空== 比如座位号</p>\n<p>​    <strong>check</strong> 检查约束【mysql语法不支持，不报错】比如检查是否性别为男女</p>\n<p>​     <strong>foreign key</strong> 外键，用于限制两个表的关系，用于保证该字段的值必须来</p>\n<p>​    自主表的关联列的值 ，==保证两个表有联系，在从表添加外键约束，用==</p>\n<p>​     ==于引用主表中某列的值==，比如学生的专业编号</p>\n<h2 id=\"添加约束的时机\">添加约束的时机<a title=\"#添加约束的时机\" href=\"#添加约束的时机\"></a></h2>\n<p>1、创建表时</p>\n<p>2、修改表时</p>\n<p>3、都在数据添加之前</p>\n<h2 id=\"约束的添加分类\">约束的添加分类<a title=\"#约束的添加分类\" href=\"#约束的添加分类\"></a></h2>\n<p>1、列级约束：六大约束在语法上都支持，==但外键约束没效果==</p>\n<p>2、表级约束：==除了非空和默认==，其他都支持</p>\n<p>create table 表名{</p>\n<p>​       <strong>字段名</strong> 字段类型  <strong>列级约束</strong></p>\n<p>​       字段名 字段类型，</p>\n<p>​        表级约束</p>\n<p>}</p>\n<h2 id=\"主键和唯一的大对比\">主键和唯一的大对比<a title=\"#主键和唯一的大对比\" href=\"#主键和唯一的大对比\"></a></h2>\n<p>​              保证唯一性     是否为空          一个表中可以有多少个  是否允许组合</p>\n<p>主键       ke                                                    至多有一个                    ke</p>\n<p>唯一        ke\t\t\t\t\t\tke                       可以有多个                    ke</p>\n<h1 id=\"外键特点\">外键特点<a title=\"#外键特点\" href=\"#外键特点\"></a></h1>\n<p>1、要求在从表设置外键关系</p>\n<p>2、从表外键列类型和主表的关联列的类型要求一致或兼容，名称无所谓</p>\n<p>3、要求主表的关联列必须是一个key（一般是主键或唯一键）</p>\n<p>4、插入数据，先插入主表，再插入从表</p>\n<p>​      删除数据，想删除从表，在删除主表</p>\n<h2 id=\"一、创建表时添加约束\">一、创建表时添加约束<a title=\"#一、创建表时添加约束\" href=\"#一、创建表时添加约束\"></a></h2>\n<h3 id=\"1、添加列级约束\">1、添加列级约束<a title=\"#1、添加列级约束\" href=\"#1、添加列级约束\"></a></h3>\n<p>（sex有别的意思，可用gender代表性别）</p>\n<p>==语法：直接在字段名和类型后面追加约束类型，只支持默认、非空、主键、唯一====，可以插入多个约束可以用空格隔开==</p>\n<p>create database stunifo(</p>\n<p>​       id int primary key ，<!--添加主键约束--></p>\n<p>​        stuname varchar（20）not null  ==unique  default==，<!--非空--></p>\n<p>​        gender char（1）check（gender =‘男’ or gender=‘女’），<!--检查--></p>\n<p>​        seat int unique， <!--唯一--></p>\n<p>​         age int default ，<!--默认约束--></p>\n<p>​         ==majorid int foreign key <strong>reference</strong> major（id），==<!--外键--></p>\n<p>)</p>\n<p>create database stunifo(</p>\n<p>​       id int primary key， <!--添加主键约束--></p>\n<p>​        stuname varchar（20）not null ，<!--非空--></p>\n<p>）</p>\n<p>==通过desc  库名查看表的结构，可查看非空、键、默认==</p>\n<p>==通过show index  from  库名查看表中所有的索引，包括主键、外键、唯一==</p>\n<h3 id=\"2、添加表级约束\">2、添加表级约束<a title=\"#2、添加表级约束\" href=\"#2、添加表级约束\"></a></h3>\n<p>==语法：在各个字段的最下边==</p>\n<p>==【constraint  约束名 】可省略约束类型 （字段名）==</p>\n<p>create database stunifo(</p>\n<p>​       id int ，</p>\n<p>​        stuname varchar（20），</p>\n<p>​        gender char（1），</p>\n<p>​        seat int，</p>\n<p>​         age int ，</p>\n<p>​         majorid int ，</p>\n<p>​         <strong>constraint</strong> pk（约束名）==primary key约束类型（id）==，为id添加主键</p>\n<p>​         ==主键名默认为primary==</p>\n<p>​         <strong>constraint</strong> uk（约束名）==unique约束类型（seat）==，为seat添加唯一键</p>\n<p>​         <strong>constraint</strong> ==ppk foreign key（majorid） <strong>reference</strong> major（id），==<!--外键--></p>\n<p>)</p>\n<p>==通用的写法：creat primary 、unique放在列级约束，主键放在表级约束==</p>\n<p>create database stunifo(</p>\n<p>​       id int primary key ，<!--添加主键约束--></p>\n<p>​        stuname varchar（20）not null ，<!--非空--></p>\n<p>​        gender char（1），</p>\n<p>​        seat int unique， <!--唯一--></p>\n<p>​         age int default ，<!--默认约束--></p>\n<p>​         majorid int ，</p>\n<p>​          <strong>constraint</strong> ==ppk foreign key（majorid） <strong>reference</strong>   ==</p>\n<p>​         ==major（id），==</p>\n<p>)</p>\n<h2 id=\"二、修改表时添加约束\">二、修改表时添加约束<a title=\"#二、修改表时添加约束\" href=\"#二、修改表时添加约束\"></a></h2>\n<h3 id=\"特点：-2\">特点：<a title=\"#特点：-2\" href=\"#特点：-2\"></a></h3>\n<p><strong>1、添加列级约束</strong></p>\n<p><strong>alter table 表名 MODIFY COLUMN 字段名 字段类型 新约束</strong></p>\n<p><strong>2、添加表级约束</strong></p>\n<p><strong>alter table 表名 add 【constraint 约束名】约束类型（字段名) 【外键的引用】</strong></p>\n<p>create database stunifo(</p>\n<p>​       id int primary key ，<!--添加主键约束--></p>\n<p>​        <strong>stuname</strong> varchar（20）not null  ==unique  default==，<!--非空--></p>\n<p>​        gender char（1）check（gender =‘男’ or gender=‘女’），<!--检查--></p>\n<p>​        seat int unique， <!--唯一--></p>\n<p>​         age int default ，<!--默认约束--></p>\n<p>​         ==majorid int foreign key <strong>reference</strong> major（id），==<!--外键--></p>\n<p>)</p>\n<h3 id=\"1、添加非空约束\">1、添加非空约束<a title=\"#1、添加非空约束\" href=\"#1、添加非空约束\"></a></h3>\n<p>alter table stunifo MODIFY COLUMN <strong>stuname（添加约束的表名）</strong></p>\n<p><strong>varchar（20）not null （对应的约束）</strong></p>\n<h3 id=\"2、添加默认约束\">2、添加默认约束<a title=\"#2、添加默认约束\" href=\"#2、添加默认约束\"></a></h3>\n<p>alter table stunifo MODIFY COLUMN <strong>age（添加约束的表名）int default 18（对应的约束）</strong></p>\n<h3 id=\"3、添加主键\">3、添加主键<a title=\"#3、添加主键\" href=\"#3、添加主键\"></a></h3>\n<p>列级约束alter table stunifo MODIFY COLUMN <strong>id int primary key</strong></p>\n<p>表级约束alter table stunifo add <strong>primary key（id）</strong></p>\n<h3 id=\"4、添加唯一键\">4、添加唯一键<a title=\"#4、添加唯一键\" href=\"#4、添加唯一键\"></a></h3>\n<p>列级约束alter table stunifo MODIFY COLUMN <strong>seat int unique</strong></p>\n<p>表级约束alter table stunifo add <strong>unique（seat）</strong></p>\n<h3 id=\"5、添加外键\">5、添加外键<a title=\"#5、添加外键\" href=\"#5、添加外键\"></a></h3>\n<p>表级约束alter table stunifo <strong>add FOREIGN KEY（majorid）reference major（id)</strong></p>\n<h2 id=\"三、修改表时删除约束\">三、修改表时删除约束<a title=\"#三、修改表时删除约束\" href=\"#三、修改表时删除约束\"></a></h2>\n<h3 id=\"1、删除非空约束\">1、删除非空约束<a title=\"#1、删除非空约束\" href=\"#1、删除非空约束\"></a></h3>\n<p>alter table stunifo MODIFY COLUMN <strong>stuname（添加约束的表名）</strong></p>\n<p><strong>varchar（20）</strong></p>\n<h3 id=\"2、删除默认约束\">2、删除默认约束<a title=\"#2、删除默认约束\" href=\"#2、删除默认约束\"></a></h3>\n<p>alter table stunifo MODIFY COLUMN **age（添加约束的表名）int **</p>\n<h3 id=\"3、删除主键\">3、删除主键<a title=\"#3、删除主键\" href=\"#3、删除主键\"></a></h3>\n<p>alter table stunifo**drop primary key  **</p>\n<h3 id=\"4、删除唯一键\">4、删除唯一键<a title=\"#4、删除唯一键\" href=\"#4、删除唯一键\"></a></h3>\n<p>alter table stunifo <strong>drop index seat</strong></p>\n<h3 id=\"5、删除外键\">5、删除外键<a title=\"#5、删除外键\" href=\"#5、删除外键\"></a></h3>\n<p>表级约束alter table stunifo <strong>drop FOREIGN KEY majorid</strong></p>\n","next":{"title":"Hello World","link":"2021/02/02/hello-world"},"plink":"http://example.com/2021/03/16/数据库/","toc":[{"id":"一、什么是sql？","title":"一、什么是SQL？","index":"1","children":[{"id":"ddl-定义数据（增删表，修改表结构）","title":"DDL-定义数据（增删表，修改表结构）","index":"1.1"},{"id":"dml-管理数据（增删改数据）","title":"DML-管理数据（增删改数据）","index":"1.2"},{"id":"dql-查询数据","title":"DQL-查询数据","index":"1.3"}]},{"id":"二、mysql","title":"二、MySQL","index":"2","children":[{"id":"==mysql的端口号一定为3306==","title":"&#x3D;&#x3D;mysql的端口号一定为3306&#x3D;&#x3D;","index":"2.1"},{"id":"==comment==","title":"&#x3D;&#x3D;comment&#x3D;&#x3D;","index":"2.2"}]},{"id":"三、关系数据库管理系统(relational-database-management-system)的特点：","title":"三、关系数据库管理系统(Relational Database Management System)的特点：","index":"3","children":[{"id":"基本概念","title":"基本概念","index":"3.1"}]},{"id":"四、使用终端操作数据库-（命令后加；）","title":"四、使用终端操作数据库 （命令后加；）","index":"4"},{"id":"五、sql语言","title":"五、sql语言","index":"5"},{"id":"dql语言","title":"DQL语言","index":"6","children":[{"id":"1、基础查询","title":"1、基础查询","index":"6.1","children":[{"id":"起别名（方便理解）","title":"起别名（方便理解）","index":"6.1.1"},{"id":"去重distinct","title":"去重distinct","index":"6.1.2"},{"id":"+号的作用--运算符，两个操作数都是数值型","title":"+号的作用  运算符，两个操作数都是数值型","index":"6.1.3"}]},{"id":"条件查询","title":"条件查询","index":"6.2","children":[{"id":"查询工资高于12000的员工：","title":"查询工资高于12000的员工：","index":"6.2.1"},{"id":"查询工资在12000到15000的员工：","title":"查询工资在12000到15000的员工：","index":"6.2.2"},{"id":"查询员工名包含第三个字符e，第五个字符为a的员工（条件不是特别具体）","title":"查询员工名包含第三个字符e，第五个字符为a的员工（条件不是特别具体）","index":"6.2.3"},{"id":"查询员工名包含第二个字符_的员工（条件不是特别具体）","title":"查询员工名包含第二个字符_的员工（条件不是特别具体）","index":"6.2.4"},{"id":"查询员工编号在100到200之间","title":"查询员工编号在100到200之间","index":"6.2.5"},{"id":"查询员工工种编号是it-、ad中的一个员工编号","title":"查询员工工种编号是IT 、AD中的一个员工编号","index":"6.2.6"},{"id":"查询没有（有）奖金的员工名和奖金率","title":"查询没有（有）奖金的员工名和奖金率","index":"6.2.7"},{"id":"查询没有（有）奖金","title":"查询没有（有）奖金","index":"6.2.8"}]}]},{"id":"排序查询","title":"排序查询","index":"7","children":[{"id":"查询员工工资从高到低：","title":"查询员工工资从高到低：","index":"7.1"},{"id":"查询部门编号大于等于90的员工信息，按入职时间先后进行排序","title":"查询部门编号大于等于90的员工信息，按入职时间先后进行排序","index":"7.2"},{"id":"按年薪高低显示员工年薪和信息（表达式）","title":"按年薪高低显示员工年薪和信息（表达式）","index":"7.3"},{"id":"按姓名长度显示员工姓名和工资（函数）","title":"按姓名长度显示员工姓名和工资（函数）","index":"7.4"},{"id":"查询员工信息，先按工资排序，再按员工编号排序（多个字段）：","title":"查询员工信息，先按工资排序，再按员工编号排序（多个字段）：","index":"7.5"}]},{"id":"常见函数","title":"常见函数","index":"8","children":[{"id":"1、字节函数：","title":"1、字节函数：","index":"8.1","children":[{"id":"length获取参数的字节个数","title":"Length获取参数的字节个数","index":"8.1.1"},{"id":"concat拼接字符串","title":"Concat拼接字符串","index":"8.1.2"},{"id":"uper、lower大写小写","title":"Uper、lower大写小写","index":"8.1.3"},{"id":"将姓大写，名小写，拼接","title":"将姓大写，名小写，拼接","index":"8.1.4"},{"id":"substr、substring-截取字符串，索引从1开始","title":"Substr、substring 截取字符串，索引从1开始","index":"8.1.5"},{"id":"instr返回第一次出现的起始索引","title":"Instr返回第一次出现的起始索引","index":"8.1.6"},{"id":"trim-去前后","title":"trim 去前后","index":"8.1.7"},{"id":"lpad-用指定字符左填充","title":"Lpad 用指定字符左填充","index":"8.1.8"},{"id":"rpad-用指定字符右填充","title":"rpad 用指定字符右填充","index":"8.1.9"},{"id":"replace-替换","title":"replace 替换","index":"8.1.10"},{"id":"1、数学函数：","title":"1、数学函数：","index":"8.1.11"},{"id":"2、日期函数：","title":"2、日期函数：","index":"8.1.12"},{"id":"3、其他函数","title":"3、其他函数","index":"8.1.13"},{"id":"4、流程控制函数","title":"4、流程控制函数","index":"8.1.14"},{"id":"分组函数","title":"分组函数","index":"8.1.15"}]},{"id":"连接查询","title":"连接查询","index":"8.2","children":[{"id":"一、sql192语法","title":"一、sql192语法","index":"8.2.1"},{"id":"1、等值连接","title":"1、等值连接","index":"8.2.2"},{"id":"2、非等值连接--数值不是等于，而是在两个数之间","title":"2、非等值连接  数值不是等于，而是在两个数之间","index":"8.2.3"},{"id":"3、自连接--自己连接自己","title":"3、自连接  自己连接自己","index":"8.2.4"},{"id":"二、sql199语法","title":"二、sql199语法","index":"8.2.5"},{"id":"1、内连接-（查询交集部分）","title":"1、内连接 （查询交集部分）","index":"8.2.6"},{"id":"2、外连接（用于查询一个表中，另一个表没有的记录）","title":"2、外连接（用于查询一个表中，另一个表没有的记录）","index":"8.2.7"},{"id":"3、全外连接（交集+两个表）","title":"3、全外连接（交集+两个表）","index":"8.2.8"},{"id":"4、交叉连接(乘积连接）","title":"4、交叉连接(乘积连接）","index":"8.2.9"}]},{"id":"子查询","title":"子查询","index":"8.3","children":[{"id":"一、where或having后面","title":"一、where或having后面","index":"8.3.1"},{"id":"二、放在select后面-（一定要起别名）","title":"二、放在select后面 （一定要起别名）","index":"8.3.2"},{"id":"三、from后面，将子查询查到的数据当作表格","title":"三、from后面，将子查询查到的数据当作表格","index":"8.3.3"},{"id":"四、exists后面（相关子查询）是否存在，是个布尔类型，1代表true","title":"四、exists后面（相关子查询）是否存在，是个布尔类型，1代表true","index":"8.3.4"}]},{"id":"分页查询*","title":"分页查询*","index":"8.4"},{"id":"联合查询","title":"联合查询","index":"8.5"}]},{"id":"dml语言-数据操作语言*","title":"DML语言 数据操作语言*","index":"9","children":[{"id":"一、插入语句","title":"一、插入语句","index":"9.1"},{"id":"二、修改语句","title":"二、修改语句","index":"9.2"},{"id":"三、删除语句","title":"三、删除语句","index":"9.3","children":[{"id":"方式一","title":"方式一","index":"9.3.1"},{"id":"方式二","title":"方式二","index":"9.3.2"}]},{"id":"区别【面试题】","title":"区别【面试题】","index":"9.4"}]},{"id":"ddl语言--数据定义语言","title":"DDL语言  数据定义语言","index":"10","children":[{"id":"一、库的管理","title":"一、库的管理","index":"10.1","children":[{"id":"1、库的创建","title":"1、库的创建","index":"10.1.1"},{"id":"2、库的修改","title":"2、库的修改","index":"10.1.2"},{"id":"3、库的删除","title":"3、库的删除","index":"10.1.3"}]},{"id":"二、表的管理","title":"二、表的管理","index":"10.2","children":[{"id":"1、表的创建","title":"1、表的创建","index":"10.2.1"},{"id":"2、表的修改","title":"2、表的修改","index":"10.2.2"},{"id":"3、表的删除","title":"3、表的删除","index":"10.2.3"},{"id":"4、表的复制","title":"4、表的复制","index":"10.2.4"}]}]},{"id":"常见的数据类型","title":"常见的数据类型","index":"11","children":[{"id":"一、整型","title":"一、整型","index":"11.1","children":[{"id":"1、如何设置无符号和有符号","title":"1、如何设置无符号和有符号","index":"11.1.1"},{"id":"2、插入的数值超出范围后，会报out-of-range-异常，并且插入临界值","title":"2、插入的数值超出范围后，会报out of range 异常，并且插入临界值","index":"11.1.2"}]},{"id":"二、小数","title":"二、小数","index":"11.2"},{"id":"1、浮点型","title":"1、浮点型","index":"11.3"},{"id":"2、定点型","title":"2、定点型","index":"11.4","children":[{"id":"特点：-1","title":"特点：","index":"11.4.1"}]},{"id":"原则","title":"原则","index":"11.5"},{"id":"三、字符型","title":"三、字符型","index":"11.6"},{"id":"四、enum类型-枚举","title":"四、Enum类型 枚举","index":"11.7"},{"id":"五、set类型","title":"五、Set类型","index":"11.8"},{"id":"六、日期型","title":"六、日期型","index":"11.9","children":[{"id":"datetime和timestamp区别","title":"datetime和timestamp区别","index":"11.9.1"}]}]},{"id":"常见的约束","title":"常见的约束","index":"12","children":[{"id":"添加约束的时机","title":"添加约束的时机","index":"12.1"},{"id":"约束的添加分类","title":"约束的添加分类","index":"12.2"},{"id":"主键和唯一的大对比","title":"主键和唯一的大对比","index":"12.3"}]},{"id":"外键特点","title":"外键特点","index":"13","children":[{"id":"一、创建表时添加约束","title":"一、创建表时添加约束","index":"13.1","children":[{"id":"1、添加列级约束","title":"1、添加列级约束","index":"13.1.1"},{"id":"2、添加表级约束","title":"2、添加表级约束","index":"13.1.2"}]},{"id":"二、修改表时添加约束","title":"二、修改表时添加约束","index":"13.2","children":[{"id":"特点：-2","title":"特点：","index":"13.2.1"},{"id":"1、添加非空约束","title":"1、添加非空约束","index":"13.2.2"},{"id":"2、添加默认约束","title":"2、添加默认约束","index":"13.2.3"},{"id":"3、添加主键","title":"3、添加主键","index":"13.2.4"},{"id":"4、添加唯一键","title":"4、添加唯一键","index":"13.2.5"},{"id":"5、添加外键","title":"5、添加外键","index":"13.2.6"}]},{"id":"三、修改表时删除约束","title":"三、修改表时删除约束","index":"13.3","children":[{"id":"1、删除非空约束","title":"1、删除非空约束","index":"13.3.1"},{"id":"2、删除默认约束","title":"2、删除默认约束","index":"13.3.2"},{"id":"3、删除主键","title":"3、删除主键","index":"13.3.3"},{"id":"4、删除唯一键","title":"4、删除唯一键","index":"13.3.4"},{"id":"5、删除外键","title":"5、删除外键","index":"13.3.5"}]}]}],"copyright":{"author":"John Doe","license":"Attribution-NonCommercial-NoDerivatives 4.0 International"}}